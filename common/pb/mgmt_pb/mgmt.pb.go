// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: mgmt.proto

package mgmt_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	// Protoc says this has to be here
	ContentType_Zero ContentType = 0
	// Streams
	ContentType_StreamEventsRequestType        ContentType = 10040
	ContentType_StreamEventsEventType          ContentType = 10041
	ContentType_TogglePipeTracesRequestType    ContentType = 10044
	ContentType_ToggleCircuitTracesRequestType ContentType = 10045
	ContentType_StreamTracesRequestType        ContentType = 10046
	ContentType_StreamTracesEventType          ContentType = 10047
	// Inspect
	ContentType_InspectRequestType  ContentType = 10048
	ContentType_InspectResponseType ContentType = 10049
	// Snapshot db
	ContentType_SnapshotDbRequestType ContentType = 10070
	// Router Mgmt
	ContentType_RouterDebugForgetLinkRequestType          ContentType = 10071
	ContentType_RouterDebugToggleCtrlChannelRequestType   ContentType = 10072
	ContentType_RouterDebugUpdateRouteRequestType         ContentType = 10073
	ContentType_RouterDebugDumpForwarderTablesRequestType ContentType = 10074
	ContentType_RouterDebugDumpLinksRequestType           ContentType = 10075
	ContentType_RouterDebugUnrouteRequestType             ContentType = 10076
	ContentType_RouterQuiesceRequestType                  ContentType = 10077
	ContentType_RouterDequiesceRequestType                ContentType = 10078
	ContentType_RouterDecommissionRequestType             ContentType = 10079
	// Raft
	ContentType_RaftListMembersRequestType        ContentType = 10080
	ContentType_RaftListMembersResponseType       ContentType = 10081
	ContentType_RaftAddPeerRequestType            ContentType = 10082
	ContentType_RaftRemovePeerRequestType         ContentType = 10083
	ContentType_RaftTransferLeadershipRequestType ContentType = 10084
	ContentType_RaftInitFromDb                    ContentType = 10085
	ContentType_RaftInit                          ContentType = 10086
	ContentType_RaftRestoreFromDb                 ContentType = 10087
	// Validate
	ContentType_ValidateTerminatorsRequestType                 ContentType = 10100
	ContentType_ValidateTerminatorResponseType                 ContentType = 10101
	ContentType_ValidateTerminatorResultType                   ContentType = 10102
	ContentType_ValidateRouterLinksRequestType                 ContentType = 10103
	ContentType_ValidateRouterLinksResponseType                ContentType = 10104
	ContentType_ValidateRouterLinksResultType                  ContentType = 10105
	ContentType_ValidateRouterSdkTerminatorsRequestType        ContentType = 10106
	ContentType_ValidateRouterSdkTerminatorsResponseType       ContentType = 10107
	ContentType_ValidateRouterSdkTerminatorsResultType         ContentType = 10108
	ContentType_ValidateRouterDataModelRequestType             ContentType = 10109
	ContentType_ValidateRouterDataModelResponseType            ContentType = 10110
	ContentType_ValidateRouterDataModelResultType              ContentType = 10111
	ContentType_ValidateIdentityConnectionStatusesRequestType  ContentType = 10112
	ContentType_ValidateIdentityConnectionStatusesResponseType ContentType = 10113
	ContentType_ValidateIdentityConnectionStatusesResultType   ContentType = 10114
	ContentType_ValidateRouterErtTerminatorsRequestType        ContentType = 10115
	ContentType_ValidateRouterErtTerminatorsResponseType       ContentType = 10116
	ContentType_ValidateRouterErtTerminatorsResultType         ContentType = 10117
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:     "Zero",
		10040: "StreamEventsRequestType",
		10041: "StreamEventsEventType",
		10044: "TogglePipeTracesRequestType",
		10045: "ToggleCircuitTracesRequestType",
		10046: "StreamTracesRequestType",
		10047: "StreamTracesEventType",
		10048: "InspectRequestType",
		10049: "InspectResponseType",
		10070: "SnapshotDbRequestType",
		10071: "RouterDebugForgetLinkRequestType",
		10072: "RouterDebugToggleCtrlChannelRequestType",
		10073: "RouterDebugUpdateRouteRequestType",
		10074: "RouterDebugDumpForwarderTablesRequestType",
		10075: "RouterDebugDumpLinksRequestType",
		10076: "RouterDebugUnrouteRequestType",
		10077: "RouterQuiesceRequestType",
		10078: "RouterDequiesceRequestType",
		10079: "RouterDecommissionRequestType",
		10080: "RaftListMembersRequestType",
		10081: "RaftListMembersResponseType",
		10082: "RaftAddPeerRequestType",
		10083: "RaftRemovePeerRequestType",
		10084: "RaftTransferLeadershipRequestType",
		10085: "RaftInitFromDb",
		10086: "RaftInit",
		10087: "RaftRestoreFromDb",
		10100: "ValidateTerminatorsRequestType",
		10101: "ValidateTerminatorResponseType",
		10102: "ValidateTerminatorResultType",
		10103: "ValidateRouterLinksRequestType",
		10104: "ValidateRouterLinksResponseType",
		10105: "ValidateRouterLinksResultType",
		10106: "ValidateRouterSdkTerminatorsRequestType",
		10107: "ValidateRouterSdkTerminatorsResponseType",
		10108: "ValidateRouterSdkTerminatorsResultType",
		10109: "ValidateRouterDataModelRequestType",
		10110: "ValidateRouterDataModelResponseType",
		10111: "ValidateRouterDataModelResultType",
		10112: "ValidateIdentityConnectionStatusesRequestType",
		10113: "ValidateIdentityConnectionStatusesResponseType",
		10114: "ValidateIdentityConnectionStatusesResultType",
		10115: "ValidateRouterErtTerminatorsRequestType",
		10116: "ValidateRouterErtTerminatorsResponseType",
		10117: "ValidateRouterErtTerminatorsResultType",
	}
	ContentType_value = map[string]int32{
		"Zero":                                           0,
		"StreamEventsRequestType":                        10040,
		"StreamEventsEventType":                          10041,
		"TogglePipeTracesRequestType":                    10044,
		"ToggleCircuitTracesRequestType":                 10045,
		"StreamTracesRequestType":                        10046,
		"StreamTracesEventType":                          10047,
		"InspectRequestType":                             10048,
		"InspectResponseType":                            10049,
		"SnapshotDbRequestType":                          10070,
		"RouterDebugForgetLinkRequestType":               10071,
		"RouterDebugToggleCtrlChannelRequestType":        10072,
		"RouterDebugUpdateRouteRequestType":              10073,
		"RouterDebugDumpForwarderTablesRequestType":      10074,
		"RouterDebugDumpLinksRequestType":                10075,
		"RouterDebugUnrouteRequestType":                  10076,
		"RouterQuiesceRequestType":                       10077,
		"RouterDequiesceRequestType":                     10078,
		"RouterDecommissionRequestType":                  10079,
		"RaftListMembersRequestType":                     10080,
		"RaftListMembersResponseType":                    10081,
		"RaftAddPeerRequestType":                         10082,
		"RaftRemovePeerRequestType":                      10083,
		"RaftTransferLeadershipRequestType":              10084,
		"RaftInitFromDb":                                 10085,
		"RaftInit":                                       10086,
		"RaftRestoreFromDb":                              10087,
		"ValidateTerminatorsRequestType":                 10100,
		"ValidateTerminatorResponseType":                 10101,
		"ValidateTerminatorResultType":                   10102,
		"ValidateRouterLinksRequestType":                 10103,
		"ValidateRouterLinksResponseType":                10104,
		"ValidateRouterLinksResultType":                  10105,
		"ValidateRouterSdkTerminatorsRequestType":        10106,
		"ValidateRouterSdkTerminatorsResponseType":       10107,
		"ValidateRouterSdkTerminatorsResultType":         10108,
		"ValidateRouterDataModelRequestType":             10109,
		"ValidateRouterDataModelResponseType":            10110,
		"ValidateRouterDataModelResultType":              10111,
		"ValidateIdentityConnectionStatusesRequestType":  10112,
		"ValidateIdentityConnectionStatusesResponseType": 10113,
		"ValidateIdentityConnectionStatusesResultType":   10114,
		"ValidateRouterErtTerminatorsRequestType":        10115,
		"ValidateRouterErtTerminatorsResponseType":       10116,
		"ValidateRouterErtTerminatorsResultType":         10117,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

type Header int32

const (
	Header_NoneHeader      Header = 0
	Header_EventTypeHeader Header = 10
	Header_CtrlChanToggle  Header = 11
	Header_ControllerId    Header = 12
)

// Enum value maps for Header.
var (
	Header_name = map[int32]string{
		0:  "NoneHeader",
		10: "EventTypeHeader",
		11: "CtrlChanToggle",
		12: "ControllerId",
	}
	Header_value = map[string]int32{
		"NoneHeader":      0,
		"EventTypeHeader": 10,
		"CtrlChanToggle":  11,
		"ControllerId":    12,
	}
)

func (x Header) Enum() *Header {
	p := new(Header)
	*p = x
	return p
}

func (x Header) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Header) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[1].Descriptor()
}

func (Header) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[1]
}

func (x Header) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Header.Descriptor instead.
func (Header) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1}
}

type StreamCircuitEventType int32

const (
	StreamCircuitEventType_CircuitCreated StreamCircuitEventType = 0
	StreamCircuitEventType_CircuitDeleted StreamCircuitEventType = 1
	StreamCircuitEventType_CircuitPresent StreamCircuitEventType = 2
	StreamCircuitEventType_PathUpdated    StreamCircuitEventType = 3
	StreamCircuitEventType_CircuitFailed  StreamCircuitEventType = 4
)

// Enum value maps for StreamCircuitEventType.
var (
	StreamCircuitEventType_name = map[int32]string{
		0: "CircuitCreated",
		1: "CircuitDeleted",
		2: "CircuitPresent",
		3: "PathUpdated",
		4: "CircuitFailed",
	}
	StreamCircuitEventType_value = map[string]int32{
		"CircuitCreated": 0,
		"CircuitDeleted": 1,
		"CircuitPresent": 2,
		"PathUpdated":    3,
		"CircuitFailed":  4,
	}
)

func (x StreamCircuitEventType) Enum() *StreamCircuitEventType {
	p := new(StreamCircuitEventType)
	*p = x
	return p
}

func (x StreamCircuitEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamCircuitEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[2].Descriptor()
}

func (StreamCircuitEventType) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[2]
}

func (x StreamCircuitEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamCircuitEventType.Descriptor instead.
func (StreamCircuitEventType) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{2}
}

type TraceFilterType int32

const (
	TraceFilterType_EXCLUDE TraceFilterType = 0
	TraceFilterType_INCLUDE TraceFilterType = 1
)

// Enum value maps for TraceFilterType.
var (
	TraceFilterType_name = map[int32]string{
		0: "EXCLUDE",
		1: "INCLUDE",
	}
	TraceFilterType_value = map[string]int32{
		"EXCLUDE": 0,
		"INCLUDE": 1,
	}
)

func (x TraceFilterType) Enum() *TraceFilterType {
	p := new(TraceFilterType)
	*p = x
	return p
}

func (x TraceFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TraceFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[3].Descriptor()
}

func (TraceFilterType) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[3]
}

func (x TraceFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TraceFilterType.Descriptor instead.
func (TraceFilterType) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{3}
}

type TerminatorState int32

const (
	TerminatorState_Valid                    TerminatorState = 0
	TerminatorState_Unknown                  TerminatorState = 1
	TerminatorState_InvalidUnknownBinding    TerminatorState = 2
	TerminatorState_InvalidUnknownTerminator TerminatorState = 3
	TerminatorState_InvalidBadState          TerminatorState = 4
)

// Enum value maps for TerminatorState.
var (
	TerminatorState_name = map[int32]string{
		0: "Valid",
		1: "Unknown",
		2: "InvalidUnknownBinding",
		3: "InvalidUnknownTerminator",
		4: "InvalidBadState",
	}
	TerminatorState_value = map[string]int32{
		"Valid":                    0,
		"Unknown":                  1,
		"InvalidUnknownBinding":    2,
		"InvalidUnknownTerminator": 3,
		"InvalidBadState":          4,
	}
)

func (x TerminatorState) Enum() *TerminatorState {
	p := new(TerminatorState)
	*p = x
	return p
}

func (x TerminatorState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminatorState) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[4].Descriptor()
}

func (TerminatorState) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[4]
}

func (x TerminatorState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminatorState.Descriptor instead.
func (TerminatorState) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{4}
}

type LinkState int32

const (
	LinkState_LinkUnknown     LinkState = 0
	LinkState_LinkEstablished LinkState = 1
	LinkState_LinkPending     LinkState = 2
	LinkState_LinkDialing     LinkState = 3
)

// Enum value maps for LinkState.
var (
	LinkState_name = map[int32]string{
		0: "LinkUnknown",
		1: "LinkEstablished",
		2: "LinkPending",
		3: "LinkDialing",
	}
	LinkState_value = map[string]int32{
		"LinkUnknown":     0,
		"LinkEstablished": 1,
		"LinkPending":     2,
		"LinkDialing":     3,
	}
)

func (x LinkState) Enum() *LinkState {
	p := new(LinkState)
	*p = x
	return p
}

func (x LinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_mgmt_proto_enumTypes[5].Descriptor()
}

func (LinkState) Type() protoreflect.EnumType {
	return &file_mgmt_proto_enumTypes[5]
}

func (x LinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkState.Descriptor instead.
func (LinkState) EnumDescriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{5}
}

type StreamMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers []*StreamMetricsRequest_MetricMatcher `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty"`
}

func (x *StreamMetricsRequest) Reset() {
	*x = StreamMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsRequest) ProtoMessage() {}

func (x *StreamMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsRequest.ProtoReflect.Descriptor instead.
func (*StreamMetricsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0}
}

func (x *StreamMetricsRequest) GetMatchers() []*StreamMetricsRequest_MetricMatcher {
	if x != nil {
		return x.Matchers
	}
	return nil
}

type StreamMetricsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceId        string                               `protobuf:"bytes,1,opt,name=sourceId,proto3" json:"sourceId,omitempty"`
	Timestamp       *timestamppb.Timestamp               `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tags            map[string]string                    `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IntMetrics      map[string]int64                     `protobuf:"bytes,4,rep,name=intMetrics,proto3" json:"intMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FloatMetrics    map[string]float64                   `protobuf:"bytes,5,rep,name=floatMetrics,proto3" json:"floatMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	IntervalMetrics []*StreamMetricsEvent_IntervalMetric `protobuf:"bytes,6,rep,name=intervalMetrics,proto3" json:"intervalMetrics,omitempty"`
	MetricGroup     map[string]string                    `protobuf:"bytes,7,rep,name=metricGroup,proto3" json:"metricGroup,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StreamMetricsEvent) Reset() {
	*x = StreamMetricsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetricsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsEvent) ProtoMessage() {}

func (x *StreamMetricsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsEvent.ProtoReflect.Descriptor instead.
func (*StreamMetricsEvent) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1}
}

func (x *StreamMetricsEvent) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *StreamMetricsEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StreamMetricsEvent) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *StreamMetricsEvent) GetIntMetrics() map[string]int64 {
	if x != nil {
		return x.IntMetrics
	}
	return nil
}

func (x *StreamMetricsEvent) GetFloatMetrics() map[string]float64 {
	if x != nil {
		return x.FloatMetrics
	}
	return nil
}

func (x *StreamMetricsEvent) GetIntervalMetrics() []*StreamMetricsEvent_IntervalMetric {
	if x != nil {
		return x.IntervalMetrics
	}
	return nil
}

func (x *StreamMetricsEvent) GetMetricGroup() map[string]string {
	if x != nil {
		return x.MetricGroup
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes                  []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Links                  []string `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	TerminatorLocalAddress string   `protobuf:"bytes,3,opt,name=terminatorLocalAddress,proto3" json:"terminatorLocalAddress,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{2}
}

func (x *Path) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Path) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Path) GetTerminatorLocalAddress() string {
	if x != nil {
		return x.TerminatorLocalAddress
	}
	return ""
}

type StreamCircuitsEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType        StreamCircuitEventType `protobuf:"varint,1,opt,name=eventType,proto3,enum=ziti.mgmt_pb.StreamCircuitEventType" json:"eventType,omitempty"`
	CircuitId        string                 `protobuf:"bytes,2,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	ClientId         string                 `protobuf:"bytes,3,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ServiceId        string                 `protobuf:"bytes,4,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Path             *Path                  `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	CreationTimespan *int64                 `protobuf:"varint,6,opt,name=creationTimespan,proto3,oneof" json:"creationTimespan,omitempty"`
	TerminatorId     string                 `protobuf:"bytes,7,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
}

func (x *StreamCircuitsEvent) Reset() {
	*x = StreamCircuitsEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamCircuitsEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCircuitsEvent) ProtoMessage() {}

func (x *StreamCircuitsEvent) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCircuitsEvent.ProtoReflect.Descriptor instead.
func (*StreamCircuitsEvent) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{3}
}

func (x *StreamCircuitsEvent) GetEventType() StreamCircuitEventType {
	if x != nil {
		return x.EventType
	}
	return StreamCircuitEventType_CircuitCreated
}

func (x *StreamCircuitsEvent) GetCircuitId() string {
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *StreamCircuitsEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *StreamCircuitsEvent) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *StreamCircuitsEvent) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *StreamCircuitsEvent) GetCreationTimespan() int64 {
	if x != nil && x.CreationTimespan != nil {
		return *x.CreationTimespan
	}
	return 0
}

func (x *StreamCircuitsEvent) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

type ToggleCircuitTracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable       bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ServiceRegex string `protobuf:"bytes,2,opt,name=serviceRegex,proto3" json:"serviceRegex,omitempty"`
	ClientRegex  string `protobuf:"bytes,3,opt,name=clientRegex,proto3" json:"clientRegex,omitempty"`
}

func (x *ToggleCircuitTracesRequest) Reset() {
	*x = ToggleCircuitTracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToggleCircuitTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToggleCircuitTracesRequest) ProtoMessage() {}

func (x *ToggleCircuitTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToggleCircuitTracesRequest.ProtoReflect.Descriptor instead.
func (*ToggleCircuitTracesRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{4}
}

func (x *ToggleCircuitTracesRequest) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *ToggleCircuitTracesRequest) GetServiceRegex() string {
	if x != nil {
		return x.ServiceRegex
	}
	return ""
}

func (x *ToggleCircuitTracesRequest) GetClientRegex() string {
	if x != nil {
		return x.ClientRegex
	}
	return ""
}

type StreamTracesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnabledFilter bool            `protobuf:"varint,1,opt,name=enabledFilter,proto3" json:"enabledFilter,omitempty"`
	FilterType    TraceFilterType `protobuf:"varint,2,opt,name=filterType,proto3,enum=ziti.mgmt_pb.TraceFilterType" json:"filterType,omitempty"`
	ContentTypes  []int32         `protobuf:"varint,3,rep,packed,name=contentTypes,proto3" json:"contentTypes,omitempty"`
}

func (x *StreamTracesRequest) Reset() {
	*x = StreamTracesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTracesRequest) ProtoMessage() {}

func (x *StreamTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTracesRequest.ProtoReflect.Descriptor instead.
func (*StreamTracesRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{5}
}

func (x *StreamTracesRequest) GetEnabledFilter() bool {
	if x != nil {
		return x.EnabledFilter
	}
	return false
}

func (x *StreamTracesRequest) GetFilterType() TraceFilterType {
	if x != nil {
		return x.FilterType
	}
	return TraceFilterType_EXCLUDE
}

func (x *StreamTracesRequest) GetContentTypes() []int32 {
	if x != nil {
		return x.ContentTypes
	}
	return nil
}

type InspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppRegex        string   `protobuf:"bytes,1,opt,name=appRegex,proto3" json:"appRegex,omitempty"`
	RequestedValues []string `protobuf:"bytes,2,rep,name=requestedValues,proto3" json:"requestedValues,omitempty"`
}

func (x *InspectRequest) Reset() {
	*x = InspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRequest) ProtoMessage() {}

func (x *InspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRequest.ProtoReflect.Descriptor instead.
func (*InspectRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{6}
}

func (x *InspectRequest) GetAppRegex() string {
	if x != nil {
		return x.AppRegex
	}
	return ""
}

func (x *InspectRequest) GetRequestedValues() []string {
	if x != nil {
		return x.RequestedValues
	}
	return nil
}

type InspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []string                        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Values  []*InspectResponse_InspectValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InspectResponse) Reset() {
	*x = InspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse) ProtoMessage() {}

func (x *InspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse.ProtoReflect.Descriptor instead.
func (*InspectResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{7}
}

func (x *InspectResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InspectResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *InspectResponse) GetValues() []*InspectResponse_InspectValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Raft
type RaftMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Addr        string `protobuf:"bytes,2,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IsVoter     bool   `protobuf:"varint,3,opt,name=IsVoter,proto3" json:"IsVoter,omitempty"`
	IsLeader    bool   `protobuf:"varint,4,opt,name=IsLeader,proto3" json:"IsLeader,omitempty"`
	Version     string `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	IsConnected bool   `protobuf:"varint,6,opt,name=IsConnected,proto3" json:"IsConnected,omitempty"`
}

func (x *RaftMember) Reset() {
	*x = RaftMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMember) ProtoMessage() {}

func (x *RaftMember) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMember.ProtoReflect.Descriptor instead.
func (*RaftMember) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{8}
}

func (x *RaftMember) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RaftMember) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RaftMember) GetIsVoter() bool {
	if x != nil {
		return x.IsVoter
	}
	return false
}

func (x *RaftMember) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

func (x *RaftMember) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RaftMember) GetIsConnected() bool {
	if x != nil {
		return x.IsConnected
	}
	return false
}

type RaftMemberListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*RaftMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *RaftMemberListResponse) Reset() {
	*x = RaftMemberListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftMemberListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftMemberListResponse) ProtoMessage() {}

func (x *RaftMemberListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftMemberListResponse.ProtoReflect.Descriptor instead.
func (*RaftMemberListResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{9}
}

func (x *RaftMemberListResponse) GetMembers() []*RaftMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type ValidateTerminatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter     string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	FixInvalid bool   `protobuf:"varint,2,opt,name=fixInvalid,proto3" json:"fixInvalid,omitempty"`
}

func (x *ValidateTerminatorsRequest) Reset() {
	*x = ValidateTerminatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTerminatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTerminatorsRequest) ProtoMessage() {}

func (x *ValidateTerminatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTerminatorsRequest.ProtoReflect.Descriptor instead.
func (*ValidateTerminatorsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateTerminatorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ValidateTerminatorsRequest) GetFixInvalid() bool {
	if x != nil {
		return x.FixInvalid
	}
	return false
}

type ValidateTerminatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success         bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message         string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TerminatorCount uint64 `protobuf:"varint,3,opt,name=terminatorCount,proto3" json:"terminatorCount,omitempty"`
}

func (x *ValidateTerminatorsResponse) Reset() {
	*x = ValidateTerminatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTerminatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTerminatorsResponse) ProtoMessage() {}

func (x *ValidateTerminatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTerminatorsResponse.ProtoReflect.Descriptor instead.
func (*ValidateTerminatorsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{11}
}

func (x *ValidateTerminatorsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateTerminatorsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateTerminatorsResponse) GetTerminatorCount() uint64 {
	if x != nil {
		return x.TerminatorCount
	}
	return 0
}

type TerminatorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId string          `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	ServiceId    string          `protobuf:"bytes,2,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceName  string          `protobuf:"bytes,3,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RouterId     string          `protobuf:"bytes,4,opt,name=routerId,proto3" json:"routerId,omitempty"`
	RouterName   string          `protobuf:"bytes,5,opt,name=routerName,proto3" json:"routerName,omitempty"`
	Binding      string          `protobuf:"bytes,6,opt,name=binding,proto3" json:"binding,omitempty"`
	Address      string          `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	HostId       string          `protobuf:"bytes,8,opt,name=hostId,proto3" json:"hostId,omitempty"`
	CreateDate   string          `protobuf:"bytes,9,opt,name=createDate,proto3" json:"createDate,omitempty"`
	State        TerminatorState `protobuf:"varint,10,opt,name=state,proto3,enum=ziti.mgmt_pb.TerminatorState" json:"state,omitempty"`
	Fixed        bool            `protobuf:"varint,11,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Detail       string          `protobuf:"bytes,12,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *TerminatorDetail) Reset() {
	*x = TerminatorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminatorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminatorDetail) ProtoMessage() {}

func (x *TerminatorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminatorDetail.ProtoReflect.Descriptor instead.
func (*TerminatorDetail) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{12}
}

func (x *TerminatorDetail) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *TerminatorDetail) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *TerminatorDetail) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *TerminatorDetail) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *TerminatorDetail) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *TerminatorDetail) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *TerminatorDetail) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TerminatorDetail) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *TerminatorDetail) GetCreateDate() string {
	if x != nil {
		return x.CreateDate
	}
	return ""
}

func (x *TerminatorDetail) GetState() TerminatorState {
	if x != nil {
		return x.State
	}
	return TerminatorState_Valid
}

func (x *TerminatorDetail) GetFixed() bool {
	if x != nil {
		return x.Fixed
	}
	return false
}

func (x *TerminatorDetail) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type ValidateRouterLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ValidateRouterLinksRequest) Reset() {
	*x = ValidateRouterLinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterLinksRequest) ProtoMessage() {}

func (x *ValidateRouterLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterLinksRequest.ProtoReflect.Descriptor instead.
func (*ValidateRouterLinksRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{13}
}

func (x *ValidateRouterLinksRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ValidateRouterLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RouterCount uint64 `protobuf:"varint,3,opt,name=routerCount,proto3" json:"routerCount,omitempty"`
}

func (x *ValidateRouterLinksResponse) Reset() {
	*x = ValidateRouterLinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterLinksResponse) ProtoMessage() {}

func (x *ValidateRouterLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterLinksResponse.ProtoReflect.Descriptor instead.
func (*ValidateRouterLinksResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{14}
}

func (x *ValidateRouterLinksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateRouterLinksResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateRouterLinksResponse) GetRouterCount() uint64 {
	if x != nil {
		return x.RouterCount
	}
	return 0
}

type RouterLinkDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string              `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	RouterName      string              `protobuf:"bytes,2,opt,name=routerName,proto3" json:"routerName,omitempty"`
	ValidateSuccess bool                `protobuf:"varint,3,opt,name=validateSuccess,proto3" json:"validateSuccess,omitempty"`
	Message         string              `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	LinkDetails     []*RouterLinkDetail `protobuf:"bytes,5,rep,name=linkDetails,proto3" json:"linkDetails,omitempty"`
}

func (x *RouterLinkDetails) Reset() {
	*x = RouterLinkDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterLinkDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterLinkDetails) ProtoMessage() {}

func (x *RouterLinkDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterLinkDetails.ProtoReflect.Descriptor instead.
func (*RouterLinkDetails) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{15}
}

func (x *RouterLinkDetails) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterLinkDetails) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *RouterLinkDetails) GetValidateSuccess() bool {
	if x != nil {
		return x.ValidateSuccess
	}
	return false
}

func (x *RouterLinkDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RouterLinkDetails) GetLinkDetails() []*RouterLinkDetail {
	if x != nil {
		return x.LinkDetails
	}
	return nil
}

type RouterLinkDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId        string    `protobuf:"bytes,1,opt,name=linkId,proto3" json:"linkId,omitempty"`
	CtrlState     LinkState `protobuf:"varint,2,opt,name=ctrlState,proto3,enum=ziti.mgmt_pb.LinkState" json:"ctrlState,omitempty"`
	RouterState   LinkState `protobuf:"varint,3,opt,name=routerState,proto3,enum=ziti.mgmt_pb.LinkState" json:"routerState,omitempty"`
	DestConnected bool      `protobuf:"varint,4,opt,name=destConnected,proto3" json:"destConnected,omitempty"`
	IsValid       bool      `protobuf:"varint,5,opt,name=isValid,proto3" json:"isValid,omitempty"`
	DestRouterId  string    `protobuf:"bytes,6,opt,name=destRouterId,proto3" json:"destRouterId,omitempty"`
	Dialed        bool      `protobuf:"varint,7,opt,name=dialed,proto3" json:"dialed,omitempty"`
}

func (x *RouterLinkDetail) Reset() {
	*x = RouterLinkDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterLinkDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterLinkDetail) ProtoMessage() {}

func (x *RouterLinkDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterLinkDetail.ProtoReflect.Descriptor instead.
func (*RouterLinkDetail) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{16}
}

func (x *RouterLinkDetail) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *RouterLinkDetail) GetCtrlState() LinkState {
	if x != nil {
		return x.CtrlState
	}
	return LinkState_LinkUnknown
}

func (x *RouterLinkDetail) GetRouterState() LinkState {
	if x != nil {
		return x.RouterState
	}
	return LinkState_LinkUnknown
}

func (x *RouterLinkDetail) GetDestConnected() bool {
	if x != nil {
		return x.DestConnected
	}
	return false
}

func (x *RouterLinkDetail) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *RouterLinkDetail) GetDestRouterId() string {
	if x != nil {
		return x.DestRouterId
	}
	return ""
}

func (x *RouterLinkDetail) GetDialed() bool {
	if x != nil {
		return x.Dialed
	}
	return false
}

type ValidateRouterSdkTerminatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ValidateRouterSdkTerminatorsRequest) Reset() {
	*x = ValidateRouterSdkTerminatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterSdkTerminatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterSdkTerminatorsRequest) ProtoMessage() {}

func (x *ValidateRouterSdkTerminatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterSdkTerminatorsRequest.ProtoReflect.Descriptor instead.
func (*ValidateRouterSdkTerminatorsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{17}
}

func (x *ValidateRouterSdkTerminatorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ValidateRouterSdkTerminatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RouterCount uint64 `protobuf:"varint,3,opt,name=routerCount,proto3" json:"routerCount,omitempty"`
}

func (x *ValidateRouterSdkTerminatorsResponse) Reset() {
	*x = ValidateRouterSdkTerminatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterSdkTerminatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterSdkTerminatorsResponse) ProtoMessage() {}

func (x *ValidateRouterSdkTerminatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterSdkTerminatorsResponse.ProtoReflect.Descriptor instead.
func (*ValidateRouterSdkTerminatorsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{18}
}

func (x *ValidateRouterSdkTerminatorsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateRouterSdkTerminatorsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateRouterSdkTerminatorsResponse) GetRouterCount() uint64 {
	if x != nil {
		return x.RouterCount
	}
	return 0
}

type RouterSdkTerminatorsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string                       `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	RouterName      string                       `protobuf:"bytes,2,opt,name=routerName,proto3" json:"routerName,omitempty"`
	ValidateSuccess bool                         `protobuf:"varint,3,opt,name=validateSuccess,proto3" json:"validateSuccess,omitempty"`
	Message         string                       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details         []*RouterSdkTerminatorDetail `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *RouterSdkTerminatorsDetails) Reset() {
	*x = RouterSdkTerminatorsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterSdkTerminatorsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSdkTerminatorsDetails) ProtoMessage() {}

func (x *RouterSdkTerminatorsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSdkTerminatorsDetails.ProtoReflect.Descriptor instead.
func (*RouterSdkTerminatorsDetails) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{19}
}

func (x *RouterSdkTerminatorsDetails) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterSdkTerminatorsDetails) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *RouterSdkTerminatorsDetails) GetValidateSuccess() bool {
	if x != nil {
		return x.ValidateSuccess
	}
	return false
}

func (x *RouterSdkTerminatorsDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RouterSdkTerminatorsDetails) GetDetails() []*RouterSdkTerminatorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type RouterSdkTerminatorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId    string          `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	CtrlState       TerminatorState `protobuf:"varint,2,opt,name=ctrlState,proto3,enum=ziti.mgmt_pb.TerminatorState" json:"ctrlState,omitempty"`
	RouterState     string          `protobuf:"bytes,3,opt,name=routerState,proto3" json:"routerState,omitempty"`
	IsValid         bool            `protobuf:"varint,4,opt,name=isValid,proto3" json:"isValid,omitempty"`
	OperationActive bool            `protobuf:"varint,5,opt,name=operationActive,proto3" json:"operationActive,omitempty"`
	CreateTime      string          `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	LastAttempt     string          `protobuf:"bytes,7,opt,name=lastAttempt,proto3" json:"lastAttempt,omitempty"`
}

func (x *RouterSdkTerminatorDetail) Reset() {
	*x = RouterSdkTerminatorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterSdkTerminatorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterSdkTerminatorDetail) ProtoMessage() {}

func (x *RouterSdkTerminatorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterSdkTerminatorDetail.ProtoReflect.Descriptor instead.
func (*RouterSdkTerminatorDetail) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{20}
}

func (x *RouterSdkTerminatorDetail) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *RouterSdkTerminatorDetail) GetCtrlState() TerminatorState {
	if x != nil {
		return x.CtrlState
	}
	return TerminatorState_Valid
}

func (x *RouterSdkTerminatorDetail) GetRouterState() string {
	if x != nil {
		return x.RouterState
	}
	return ""
}

func (x *RouterSdkTerminatorDetail) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *RouterSdkTerminatorDetail) GetOperationActive() bool {
	if x != nil {
		return x.OperationActive
	}
	return false
}

func (x *RouterSdkTerminatorDetail) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *RouterSdkTerminatorDetail) GetLastAttempt() string {
	if x != nil {
		return x.LastAttempt
	}
	return ""
}

type ValidateRouterErtTerminatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ValidateRouterErtTerminatorsRequest) Reset() {
	*x = ValidateRouterErtTerminatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterErtTerminatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterErtTerminatorsRequest) ProtoMessage() {}

func (x *ValidateRouterErtTerminatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterErtTerminatorsRequest.ProtoReflect.Descriptor instead.
func (*ValidateRouterErtTerminatorsRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{21}
}

func (x *ValidateRouterErtTerminatorsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ValidateRouterErtTerminatorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	RouterCount uint64 `protobuf:"varint,3,opt,name=routerCount,proto3" json:"routerCount,omitempty"`
}

func (x *ValidateRouterErtTerminatorsResponse) Reset() {
	*x = ValidateRouterErtTerminatorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterErtTerminatorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterErtTerminatorsResponse) ProtoMessage() {}

func (x *ValidateRouterErtTerminatorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterErtTerminatorsResponse.ProtoReflect.Descriptor instead.
func (*ValidateRouterErtTerminatorsResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{22}
}

func (x *ValidateRouterErtTerminatorsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateRouterErtTerminatorsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateRouterErtTerminatorsResponse) GetRouterCount() uint64 {
	if x != nil {
		return x.RouterCount
	}
	return 0
}

type RouterErtTerminatorsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string                       `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	RouterName      string                       `protobuf:"bytes,2,opt,name=routerName,proto3" json:"routerName,omitempty"`
	ValidateSuccess bool                         `protobuf:"varint,3,opt,name=validateSuccess,proto3" json:"validateSuccess,omitempty"`
	Message         string                       `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Details         []*RouterErtTerminatorDetail `protobuf:"bytes,5,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *RouterErtTerminatorsDetails) Reset() {
	*x = RouterErtTerminatorsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterErtTerminatorsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterErtTerminatorsDetails) ProtoMessage() {}

func (x *RouterErtTerminatorsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterErtTerminatorsDetails.ProtoReflect.Descriptor instead.
func (*RouterErtTerminatorsDetails) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{23}
}

func (x *RouterErtTerminatorsDetails) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *RouterErtTerminatorsDetails) GetRouterName() string {
	if x != nil {
		return x.RouterName
	}
	return ""
}

func (x *RouterErtTerminatorsDetails) GetValidateSuccess() bool {
	if x != nil {
		return x.ValidateSuccess
	}
	return false
}

func (x *RouterErtTerminatorsDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RouterErtTerminatorsDetails) GetDetails() []*RouterErtTerminatorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type RouterErtTerminatorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId string          `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	CtrlState    TerminatorState `protobuf:"varint,2,opt,name=ctrlState,proto3,enum=ziti.mgmt_pb.TerminatorState" json:"ctrlState,omitempty"`
	RouterState  string          `protobuf:"bytes,3,opt,name=routerState,proto3" json:"routerState,omitempty"`
	IsValid      bool            `protobuf:"varint,4,opt,name=isValid,proto3" json:"isValid,omitempty"`
}

func (x *RouterErtTerminatorDetail) Reset() {
	*x = RouterErtTerminatorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterErtTerminatorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterErtTerminatorDetail) ProtoMessage() {}

func (x *RouterErtTerminatorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterErtTerminatorDetail.ProtoReflect.Descriptor instead.
func (*RouterErtTerminatorDetail) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{24}
}

func (x *RouterErtTerminatorDetail) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *RouterErtTerminatorDetail) GetCtrlState() TerminatorState {
	if x != nil {
		return x.CtrlState
	}
	return TerminatorState_Valid
}

func (x *RouterErtTerminatorDetail) GetRouterState() string {
	if x != nil {
		return x.RouterState
	}
	return ""
}

func (x *RouterErtTerminatorDetail) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

type ValidateRouterDataModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterFilter string `protobuf:"bytes,1,opt,name=routerFilter,proto3" json:"routerFilter,omitempty"`
	ValidateCtrl bool   `protobuf:"varint,2,opt,name=validateCtrl,proto3" json:"validateCtrl,omitempty"`
	Fix          bool   `protobuf:"varint,3,opt,name=fix,proto3" json:"fix,omitempty"`
}

func (x *ValidateRouterDataModelRequest) Reset() {
	*x = ValidateRouterDataModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterDataModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterDataModelRequest) ProtoMessage() {}

func (x *ValidateRouterDataModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterDataModelRequest.ProtoReflect.Descriptor instead.
func (*ValidateRouterDataModelRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{25}
}

func (x *ValidateRouterDataModelRequest) GetRouterFilter() string {
	if x != nil {
		return x.RouterFilter
	}
	return ""
}

func (x *ValidateRouterDataModelRequest) GetValidateCtrl() bool {
	if x != nil {
		return x.ValidateCtrl
	}
	return false
}

func (x *ValidateRouterDataModelRequest) GetFix() bool {
	if x != nil {
		return x.Fix
	}
	return false
}

type ValidateRouterDataModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ComponentCount uint64 `protobuf:"varint,3,opt,name=componentCount,proto3" json:"componentCount,omitempty"`
}

func (x *ValidateRouterDataModelResponse) Reset() {
	*x = ValidateRouterDataModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateRouterDataModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRouterDataModelResponse) ProtoMessage() {}

func (x *ValidateRouterDataModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRouterDataModelResponse.ProtoReflect.Descriptor instead.
func (*ValidateRouterDataModelResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{26}
}

func (x *ValidateRouterDataModelResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateRouterDataModelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateRouterDataModelResponse) GetComponentCount() uint64 {
	if x != nil {
		return x.ComponentCount
	}
	return 0
}

type RouterDataModelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType   string   `protobuf:"bytes,1,opt,name=componentType,proto3" json:"componentType,omitempty"`
	ComponentId     string   `protobuf:"bytes,2,opt,name=componentId,proto3" json:"componentId,omitempty"`
	ComponentName   string   `protobuf:"bytes,3,opt,name=componentName,proto3" json:"componentName,omitempty"`
	ValidateSuccess bool     `protobuf:"varint,4,opt,name=validateSuccess,proto3" json:"validateSuccess,omitempty"`
	Errors          []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RouterDataModelDetails) Reset() {
	*x = RouterDataModelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDataModelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDataModelDetails) ProtoMessage() {}

func (x *RouterDataModelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDataModelDetails.ProtoReflect.Descriptor instead.
func (*RouterDataModelDetails) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{27}
}

func (x *RouterDataModelDetails) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *RouterDataModelDetails) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *RouterDataModelDetails) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *RouterDataModelDetails) GetValidateSuccess() bool {
	if x != nil {
		return x.ValidateSuccess
	}
	return false
}

func (x *RouterDataModelDetails) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ValidateIdentityConnectionStatusesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterFilter string `protobuf:"bytes,1,opt,name=routerFilter,proto3" json:"routerFilter,omitempty"`
}

func (x *ValidateIdentityConnectionStatusesRequest) Reset() {
	*x = ValidateIdentityConnectionStatusesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateIdentityConnectionStatusesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateIdentityConnectionStatusesRequest) ProtoMessage() {}

func (x *ValidateIdentityConnectionStatusesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateIdentityConnectionStatusesRequest.ProtoReflect.Descriptor instead.
func (*ValidateIdentityConnectionStatusesRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{28}
}

func (x *ValidateIdentityConnectionStatusesRequest) GetRouterFilter() string {
	if x != nil {
		return x.RouterFilter
	}
	return ""
}

type ValidateIdentityConnectionStatusesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message        string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ComponentCount uint64 `protobuf:"varint,3,opt,name=componentCount,proto3" json:"componentCount,omitempty"`
}

func (x *ValidateIdentityConnectionStatusesResponse) Reset() {
	*x = ValidateIdentityConnectionStatusesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateIdentityConnectionStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateIdentityConnectionStatusesResponse) ProtoMessage() {}

func (x *ValidateIdentityConnectionStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateIdentityConnectionStatusesResponse.ProtoReflect.Descriptor instead.
func (*ValidateIdentityConnectionStatusesResponse) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{29}
}

func (x *ValidateIdentityConnectionStatusesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ValidateIdentityConnectionStatusesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ValidateIdentityConnectionStatusesResponse) GetComponentCount() uint64 {
	if x != nil {
		return x.ComponentCount
	}
	return 0
}

type RouterIdentityConnectionStatusesDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentType   string   `protobuf:"bytes,1,opt,name=componentType,proto3" json:"componentType,omitempty"`
	ComponentId     string   `protobuf:"bytes,2,opt,name=componentId,proto3" json:"componentId,omitempty"`
	ComponentName   string   `protobuf:"bytes,3,opt,name=componentName,proto3" json:"componentName,omitempty"`
	ValidateSuccess bool     `protobuf:"varint,4,opt,name=validateSuccess,proto3" json:"validateSuccess,omitempty"`
	Errors          []string `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RouterIdentityConnectionStatusesDetails) Reset() {
	*x = RouterIdentityConnectionStatusesDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterIdentityConnectionStatusesDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterIdentityConnectionStatusesDetails) ProtoMessage() {}

func (x *RouterIdentityConnectionStatusesDetails) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterIdentityConnectionStatusesDetails.ProtoReflect.Descriptor instead.
func (*RouterIdentityConnectionStatusesDetails) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{30}
}

func (x *RouterIdentityConnectionStatusesDetails) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *RouterIdentityConnectionStatusesDetails) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *RouterIdentityConnectionStatusesDetails) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *RouterIdentityConnectionStatusesDetails) GetValidateSuccess() bool {
	if x != nil {
		return x.ValidateSuccess
	}
	return false
}

func (x *RouterIdentityConnectionStatusesDetails) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{31}
}

func (x *InitRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *InitRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *InitRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type StreamMetricsRequest_MetricMatcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameRegex     string `protobuf:"bytes,1,opt,name=nameRegex,proto3" json:"nameRegex,omitempty"`
	SourceIDRegex string `protobuf:"bytes,2,opt,name=sourceIDRegex,proto3" json:"sourceIDRegex,omitempty"`
}

func (x *StreamMetricsRequest_MetricMatcher) Reset() {
	*x = StreamMetricsRequest_MetricMatcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetricsRequest_MetricMatcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsRequest_MetricMatcher) ProtoMessage() {}

func (x *StreamMetricsRequest_MetricMatcher) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsRequest_MetricMatcher.ProtoReflect.Descriptor instead.
func (*StreamMetricsRequest_MetricMatcher) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamMetricsRequest_MetricMatcher) GetNameRegex() string {
	if x != nil {
		return x.NameRegex
	}
	return ""
}

func (x *StreamMetricsRequest_MetricMatcher) GetSourceIDRegex() string {
	if x != nil {
		return x.SourceIDRegex
	}
	return ""
}

type StreamMetricsEvent_IntervalMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IntervalStartUTC *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=intervalStartUTC,proto3" json:"intervalStartUTC,omitempty"`
	IntervalEndUTC   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=intervalEndUTC,proto3" json:"intervalEndUTC,omitempty"`
	Values           map[string]uint64      `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *StreamMetricsEvent_IntervalMetric) Reset() {
	*x = StreamMetricsEvent_IntervalMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamMetricsEvent_IntervalMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetricsEvent_IntervalMetric) ProtoMessage() {}

func (x *StreamMetricsEvent_IntervalMetric) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetricsEvent_IntervalMetric.ProtoReflect.Descriptor instead.
func (*StreamMetricsEvent_IntervalMetric) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{1, 3}
}

func (x *StreamMetricsEvent_IntervalMetric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamMetricsEvent_IntervalMetric) GetIntervalStartUTC() *timestamppb.Timestamp {
	if x != nil {
		return x.IntervalStartUTC
	}
	return nil
}

func (x *StreamMetricsEvent_IntervalMetric) GetIntervalEndUTC() *timestamppb.Timestamp {
	if x != nil {
		return x.IntervalEndUTC
	}
	return nil
}

func (x *StreamMetricsEvent_IntervalMetric) GetValues() map[string]uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

type InspectResponse_InspectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=appId,proto3" json:"appId,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InspectResponse_InspectValue) Reset() {
	*x = InspectResponse_InspectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mgmt_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse_InspectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse_InspectValue) ProtoMessage() {}

func (x *InspectResponse_InspectValue) ProtoReflect() protoreflect.Message {
	mi := &file_mgmt_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse_InspectValue.ProtoReflect.Descriptor instead.
func (*InspectResponse_InspectValue) Descriptor() ([]byte, []int) {
	return file_mgmt_proto_rawDescGZIP(), []int{7, 0}
}

func (x *InspectResponse_InspectValue) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *InspectResponse_InspectValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectResponse_InspectValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_mgmt_proto protoreflect.FileDescriptor

var file_mgmt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67,
	0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0xc0, 0x08, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70,
	0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x59,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc0, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x54, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x54, 0x43, 0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x45, 0x6e, 0x64, 0x55, 0x54, 0x43, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x55, 0x54, 0x43, 0x12, 0x53, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x36,
	0x0a, 0x16, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2f, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x7a, 0x0a, 0x1a,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x9e, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x0e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d,
	0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0a,
	0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x22, 0x4c, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x54,
	0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x81, 0x03, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x34, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x1b, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xd5, 0x01, 0x0a, 0x11, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x6c, 0x69, 0x6e,
	0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x10, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c,
	0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x69, 0x61,
	0x6c, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x7c, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64,
	0x6b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x22, 0x3d, 0x0a, 0x23, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7c, 0x0a, 0x24, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x19, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09,
	0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x2e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09,
	0x63, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x66, 0x69,
	0x78, 0x22, 0x7d, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xc8, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x4f, 0x0a, 0x29, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x88, 0x01, 0x0a,
	0x2a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x27, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x59, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0xe7,
	0x0c, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xb8, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xb9, 0x4e, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x69, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xbc, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xbd, 0x4e, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xbe, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0xbf, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xc0, 0x4e, 0x12, 0x18, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xc1, 0x4e, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x44, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xd6, 0x4e, 0x12, 0x25, 0x0a, 0x20, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x46, 0x6f, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd7, 0x4e, 0x12, 0x2c, 0x0a, 0x27, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x43, 0x74,
	0x72, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xd8, 0x4e, 0x12, 0x26, 0x0a, 0x21, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xd9, 0x4e, 0x12,
	0x2e, 0x0a, 0x29, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x75,
	0x6d, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xda, 0x4e, 0x12,
	0x24, 0x0a, 0x1f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x62, 0x75, 0x67, 0x44, 0x75,
	0x6d, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0xdb, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x62, 0x75, 0x67, 0x55, 0x6e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xdc, 0x4e, 0x12, 0x1d, 0x0a, 0x18, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xdd, 0x4e, 0x12, 0x1f, 0x0a, 0x1a, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xde, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xdf, 0x4e, 0x12, 0x1f, 0x0a,
	0x1a, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe0, 0x4e, 0x12, 0x20,
	0x0a, 0x1b, 0x52, 0x61, 0x66, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe1, 0x4e,
	0x12, 0x1b, 0x0a, 0x16, 0x52, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe2, 0x4e, 0x12, 0x1e, 0x0a,
	0x19, 0x52, 0x61, 0x66, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe3, 0x4e, 0x12, 0x26, 0x0a,
	0x21, 0x52, 0x61, 0x66, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0xe4, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x52, 0x61, 0x66, 0x74, 0x49, 0x6e, 0x69,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x62, 0x10, 0xe5, 0x4e, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x61,
	0x66, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x10, 0xe6, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x52, 0x61, 0x66,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x44, 0x62, 0x10, 0xe7,
	0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xf4, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf5, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf6, 0x4e, 0x12, 0x23,
	0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0xf7, 0x4e, 0x12, 0x24, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf8, 0x4e, 0x12, 0x22, 0x0a, 0x1d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf9, 0x4e, 0x12, 0x2c, 0x0a,
	0x27, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53,
	0x64, 0x6b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfa, 0x4e, 0x12, 0x2d, 0x0a, 0x28, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfb, 0x4e, 0x12, 0x2b, 0x0a, 0x26, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x64, 0x6b, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xfc, 0x4e, 0x12, 0x27, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfd, 0x4e,
	0x12, 0x28, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfe, 0x4e, 0x12, 0x26, 0x0a, 0x21, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xff, 0x4e, 0x12, 0x32, 0x0a, 0x2d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x80, 0x4f, 0x12, 0x33, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x81, 0x4f, 0x12, 0x31, 0x0a, 0x2c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x82, 0x4f, 0x12, 0x2c,
	0x0a, 0x27, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x83, 0x4f, 0x12, 0x2d, 0x0a, 0x28,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x84, 0x4f, 0x12, 0x2b, 0x0a, 0x26, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x45, 0x72, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x85, 0x4f, 0x2a, 0x53, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x74, 0x72, 0x6c, 0x43,
	0x68, 0x61, 0x6e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x10, 0x0c, 0x2a, 0x78, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x2a, 0x2b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58,
	0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55,
	0x44, 0x45, 0x10, 0x01, 0x2a, 0x77, 0x0a, 0x0f, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x42, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x04, 0x2a, 0x53, 0x0a,
	0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69,
	0x6e, 0x6b, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c,
	0x69, 0x6e, 0x6b, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x69, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x10, 0x03, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x7a, 0x69, 0x74, 0x69, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63,
	0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x67, 0x6d, 0x74, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_mgmt_proto_rawDescOnce sync.Once
	file_mgmt_proto_rawDescData = file_mgmt_proto_rawDesc
)

func file_mgmt_proto_rawDescGZIP() []byte {
	file_mgmt_proto_rawDescOnce.Do(func() {
		file_mgmt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mgmt_proto_rawDescData)
	})
	return file_mgmt_proto_rawDescData
}

var file_mgmt_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_mgmt_proto_msgTypes = make([]protoimpl.MessageInfo, 40)
var file_mgmt_proto_goTypes = []interface{}{
	(ContentType)(0),                                   // 0: ziti.mgmt_pb.ContentType
	(Header)(0),                                        // 1: ziti.mgmt_pb.Header
	(StreamCircuitEventType)(0),                        // 2: ziti.mgmt_pb.StreamCircuitEventType
	(TraceFilterType)(0),                               // 3: ziti.mgmt_pb.TraceFilterType
	(TerminatorState)(0),                               // 4: ziti.mgmt_pb.TerminatorState
	(LinkState)(0),                                     // 5: ziti.mgmt_pb.LinkState
	(*StreamMetricsRequest)(nil),                       // 6: ziti.mgmt_pb.StreamMetricsRequest
	(*StreamMetricsEvent)(nil),                         // 7: ziti.mgmt_pb.StreamMetricsEvent
	(*Path)(nil),                                       // 8: ziti.mgmt_pb.Path
	(*StreamCircuitsEvent)(nil),                        // 9: ziti.mgmt_pb.StreamCircuitsEvent
	(*ToggleCircuitTracesRequest)(nil),                 // 10: ziti.mgmt_pb.ToggleCircuitTracesRequest
	(*StreamTracesRequest)(nil),                        // 11: ziti.mgmt_pb.StreamTracesRequest
	(*InspectRequest)(nil),                             // 12: ziti.mgmt_pb.InspectRequest
	(*InspectResponse)(nil),                            // 13: ziti.mgmt_pb.InspectResponse
	(*RaftMember)(nil),                                 // 14: ziti.mgmt_pb.RaftMember
	(*RaftMemberListResponse)(nil),                     // 15: ziti.mgmt_pb.RaftMemberListResponse
	(*ValidateTerminatorsRequest)(nil),                 // 16: ziti.mgmt_pb.ValidateTerminatorsRequest
	(*ValidateTerminatorsResponse)(nil),                // 17: ziti.mgmt_pb.ValidateTerminatorsResponse
	(*TerminatorDetail)(nil),                           // 18: ziti.mgmt_pb.TerminatorDetail
	(*ValidateRouterLinksRequest)(nil),                 // 19: ziti.mgmt_pb.ValidateRouterLinksRequest
	(*ValidateRouterLinksResponse)(nil),                // 20: ziti.mgmt_pb.ValidateRouterLinksResponse
	(*RouterLinkDetails)(nil),                          // 21: ziti.mgmt_pb.RouterLinkDetails
	(*RouterLinkDetail)(nil),                           // 22: ziti.mgmt_pb.RouterLinkDetail
	(*ValidateRouterSdkTerminatorsRequest)(nil),        // 23: ziti.mgmt_pb.ValidateRouterSdkTerminatorsRequest
	(*ValidateRouterSdkTerminatorsResponse)(nil),       // 24: ziti.mgmt_pb.ValidateRouterSdkTerminatorsResponse
	(*RouterSdkTerminatorsDetails)(nil),                // 25: ziti.mgmt_pb.RouterSdkTerminatorsDetails
	(*RouterSdkTerminatorDetail)(nil),                  // 26: ziti.mgmt_pb.RouterSdkTerminatorDetail
	(*ValidateRouterErtTerminatorsRequest)(nil),        // 27: ziti.mgmt_pb.ValidateRouterErtTerminatorsRequest
	(*ValidateRouterErtTerminatorsResponse)(nil),       // 28: ziti.mgmt_pb.ValidateRouterErtTerminatorsResponse
	(*RouterErtTerminatorsDetails)(nil),                // 29: ziti.mgmt_pb.RouterErtTerminatorsDetails
	(*RouterErtTerminatorDetail)(nil),                  // 30: ziti.mgmt_pb.RouterErtTerminatorDetail
	(*ValidateRouterDataModelRequest)(nil),             // 31: ziti.mgmt_pb.ValidateRouterDataModelRequest
	(*ValidateRouterDataModelResponse)(nil),            // 32: ziti.mgmt_pb.ValidateRouterDataModelResponse
	(*RouterDataModelDetails)(nil),                     // 33: ziti.mgmt_pb.RouterDataModelDetails
	(*ValidateIdentityConnectionStatusesRequest)(nil),  // 34: ziti.mgmt_pb.ValidateIdentityConnectionStatusesRequest
	(*ValidateIdentityConnectionStatusesResponse)(nil), // 35: ziti.mgmt_pb.ValidateIdentityConnectionStatusesResponse
	(*RouterIdentityConnectionStatusesDetails)(nil),    // 36: ziti.mgmt_pb.RouterIdentityConnectionStatusesDetails
	(*InitRequest)(nil),                                // 37: ziti.mgmt_pb.InitRequest
	(*StreamMetricsRequest_MetricMatcher)(nil),         // 38: ziti.mgmt_pb.StreamMetricsRequest.MetricMatcher
	nil, // 39: ziti.mgmt_pb.StreamMetricsEvent.TagsEntry
	nil, // 40: ziti.mgmt_pb.StreamMetricsEvent.IntMetricsEntry
	nil, // 41: ziti.mgmt_pb.StreamMetricsEvent.FloatMetricsEntry
	(*StreamMetricsEvent_IntervalMetric)(nil), // 42: ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric
	nil,                                  // 43: ziti.mgmt_pb.StreamMetricsEvent.MetricGroupEntry
	nil,                                  // 44: ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric.ValuesEntry
	(*InspectResponse_InspectValue)(nil), // 45: ziti.mgmt_pb.InspectResponse.InspectValue
	(*timestamppb.Timestamp)(nil),        // 46: google.protobuf.Timestamp
}
var file_mgmt_proto_depIdxs = []int32{
	38, // 0: ziti.mgmt_pb.StreamMetricsRequest.matchers:type_name -> ziti.mgmt_pb.StreamMetricsRequest.MetricMatcher
	46, // 1: ziti.mgmt_pb.StreamMetricsEvent.timestamp:type_name -> google.protobuf.Timestamp
	39, // 2: ziti.mgmt_pb.StreamMetricsEvent.tags:type_name -> ziti.mgmt_pb.StreamMetricsEvent.TagsEntry
	40, // 3: ziti.mgmt_pb.StreamMetricsEvent.intMetrics:type_name -> ziti.mgmt_pb.StreamMetricsEvent.IntMetricsEntry
	41, // 4: ziti.mgmt_pb.StreamMetricsEvent.floatMetrics:type_name -> ziti.mgmt_pb.StreamMetricsEvent.FloatMetricsEntry
	42, // 5: ziti.mgmt_pb.StreamMetricsEvent.intervalMetrics:type_name -> ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric
	43, // 6: ziti.mgmt_pb.StreamMetricsEvent.metricGroup:type_name -> ziti.mgmt_pb.StreamMetricsEvent.MetricGroupEntry
	2,  // 7: ziti.mgmt_pb.StreamCircuitsEvent.eventType:type_name -> ziti.mgmt_pb.StreamCircuitEventType
	8,  // 8: ziti.mgmt_pb.StreamCircuitsEvent.path:type_name -> ziti.mgmt_pb.Path
	3,  // 9: ziti.mgmt_pb.StreamTracesRequest.filterType:type_name -> ziti.mgmt_pb.TraceFilterType
	45, // 10: ziti.mgmt_pb.InspectResponse.values:type_name -> ziti.mgmt_pb.InspectResponse.InspectValue
	14, // 11: ziti.mgmt_pb.RaftMemberListResponse.members:type_name -> ziti.mgmt_pb.RaftMember
	4,  // 12: ziti.mgmt_pb.TerminatorDetail.state:type_name -> ziti.mgmt_pb.TerminatorState
	22, // 13: ziti.mgmt_pb.RouterLinkDetails.linkDetails:type_name -> ziti.mgmt_pb.RouterLinkDetail
	5,  // 14: ziti.mgmt_pb.RouterLinkDetail.ctrlState:type_name -> ziti.mgmt_pb.LinkState
	5,  // 15: ziti.mgmt_pb.RouterLinkDetail.routerState:type_name -> ziti.mgmt_pb.LinkState
	26, // 16: ziti.mgmt_pb.RouterSdkTerminatorsDetails.details:type_name -> ziti.mgmt_pb.RouterSdkTerminatorDetail
	4,  // 17: ziti.mgmt_pb.RouterSdkTerminatorDetail.ctrlState:type_name -> ziti.mgmt_pb.TerminatorState
	30, // 18: ziti.mgmt_pb.RouterErtTerminatorsDetails.details:type_name -> ziti.mgmt_pb.RouterErtTerminatorDetail
	4,  // 19: ziti.mgmt_pb.RouterErtTerminatorDetail.ctrlState:type_name -> ziti.mgmt_pb.TerminatorState
	46, // 20: ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric.intervalStartUTC:type_name -> google.protobuf.Timestamp
	46, // 21: ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric.intervalEndUTC:type_name -> google.protobuf.Timestamp
	44, // 22: ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric.values:type_name -> ziti.mgmt_pb.StreamMetricsEvent.IntervalMetric.ValuesEntry
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_mgmt_proto_init() }
func file_mgmt_proto_init() {
	if File_mgmt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mgmt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetricsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamCircuitsEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToggleCircuitTracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamTracesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftMemberListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTerminatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTerminatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminatorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterLinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterLinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterLinkDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterLinkDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterSdkTerminatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterSdkTerminatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterSdkTerminatorsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterSdkTerminatorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterErtTerminatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterErtTerminatorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterErtTerminatorsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterErtTerminatorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterDataModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateRouterDataModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDataModelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateIdentityConnectionStatusesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateIdentityConnectionStatusesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterIdentityConnectionStatusesDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetricsRequest_MetricMatcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamMetricsEvent_IntervalMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mgmt_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse_InspectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mgmt_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mgmt_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   40,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mgmt_proto_goTypes,
		DependencyIndexes: file_mgmt_proto_depIdxs,
		EnumInfos:         file_mgmt_proto_enumTypes,
		MessageInfos:      file_mgmt_proto_msgTypes,
	}.Build()
	File_mgmt_proto = out.File
	file_mgmt_proto_rawDesc = nil
	file_mgmt_proto_goTypes = nil
	file_mgmt_proto_depIdxs = nil
}
