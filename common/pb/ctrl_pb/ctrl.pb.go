// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: ctrl.proto

package ctrl_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ContentTypes should be in the range 1000 - 1999, to ensure they don't overlap with cmd_pb messages
type ContentType int32

const (
	ContentType_Zero               ContentType = 0
	ContentType_CircuitRequestType ContentType = 1000
	// defined in ctrl_msg/messages.go now
	// CircuitSuccessType = 1001;
	ContentType_DialType                    ContentType = 1002
	ContentType_LinkConnectedType           ContentType = 1003
	ContentType_FaultType                   ContentType = 1004
	ContentType_RouteType                   ContentType = 1005
	ContentType_UnrouteType                 ContentType = 1006
	ContentType_MetricsType                 ContentType = 1007
	ContentType_TogglePipeTracesRequestType ContentType = 1008
	ContentType_TraceEventType              ContentType = 1010
	ContentType_CreateTerminatorRequestType ContentType = 1011
	ContentType_RemoveTerminatorRequestType ContentType = 1012
	ContentType_InspectRequestType          ContentType = 1013
	ContentType_InspectResponseType         ContentType = 1014
	// defined in ctrl_msg/messages.go now
	// CircuitFailedType = 1016;
	ContentType_ValidateTerminatorsRequestType ContentType = 1017
	ContentType_UpdateTerminatorRequestType    ContentType = 1018
	// VerifyLinkType = 1019; Unusable since links are now generated by routers
	ContentType_SettingsType                      ContentType = 1020
	ContentType_CircuitConfirmationType           ContentType = 1034
	ContentType_RouterLinksType                   ContentType = 1035
	ContentType_VerifyRouterType                  ContentType = 1036
	ContentType_UpdateCtrlAddressesType           ContentType = 1037
	ContentType_RemoveTerminatorsRequestType      ContentType = 1038
	ContentType_QuiesceRouterRequestType          ContentType = 1039
	ContentType_DequiesceRouterRequestType        ContentType = 1040
	ContentType_ValidateTerminatorsV2RequestType  ContentType = 1041
	ContentType_ValidateTerminatorsV2ResponseType ContentType = 1042
	ContentType_DecommissionRouterRequestType     ContentType = 1043
	ContentType_PeerStateChangeRequestType        ContentType = 1050
	ContentType_UpdateClusterLeaderRequestType    ContentType = 1051
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:    "Zero",
		1000: "CircuitRequestType",
		1002: "DialType",
		1003: "LinkConnectedType",
		1004: "FaultType",
		1005: "RouteType",
		1006: "UnrouteType",
		1007: "MetricsType",
		1008: "TogglePipeTracesRequestType",
		1010: "TraceEventType",
		1011: "CreateTerminatorRequestType",
		1012: "RemoveTerminatorRequestType",
		1013: "InspectRequestType",
		1014: "InspectResponseType",
		1017: "ValidateTerminatorsRequestType",
		1018: "UpdateTerminatorRequestType",
		1020: "SettingsType",
		1034: "CircuitConfirmationType",
		1035: "RouterLinksType",
		1036: "VerifyRouterType",
		1037: "UpdateCtrlAddressesType",
		1038: "RemoveTerminatorsRequestType",
		1039: "QuiesceRouterRequestType",
		1040: "DequiesceRouterRequestType",
		1041: "ValidateTerminatorsV2RequestType",
		1042: "ValidateTerminatorsV2ResponseType",
		1043: "DecommissionRouterRequestType",
		1050: "PeerStateChangeRequestType",
		1051: "UpdateClusterLeaderRequestType",
	}
	ContentType_value = map[string]int32{
		"Zero":                              0,
		"CircuitRequestType":                1000,
		"DialType":                          1002,
		"LinkConnectedType":                 1003,
		"FaultType":                         1004,
		"RouteType":                         1005,
		"UnrouteType":                       1006,
		"MetricsType":                       1007,
		"TogglePipeTracesRequestType":       1008,
		"TraceEventType":                    1010,
		"CreateTerminatorRequestType":       1011,
		"RemoveTerminatorRequestType":       1012,
		"InspectRequestType":                1013,
		"InspectResponseType":               1014,
		"ValidateTerminatorsRequestType":    1017,
		"UpdateTerminatorRequestType":       1018,
		"SettingsType":                      1020,
		"CircuitConfirmationType":           1034,
		"RouterLinksType":                   1035,
		"VerifyRouterType":                  1036,
		"UpdateCtrlAddressesType":           1037,
		"RemoveTerminatorsRequestType":      1038,
		"QuiesceRouterRequestType":          1039,
		"DequiesceRouterRequestType":        1040,
		"ValidateTerminatorsV2RequestType":  1041,
		"ValidateTerminatorsV2ResponseType": 1042,
		"DecommissionRouterRequestType":     1043,
		"PeerStateChangeRequestType":        1050,
		"UpdateClusterLeaderRequestType":    1051,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{0}
}

type ControlHeaders int32

const (
	ControlHeaders_NoneHeader           ControlHeaders = 0
	ControlHeaders_ListenersHeader      ControlHeaders = 10
	ControlHeaders_RouterMetadataHeader ControlHeaders = 11
	ControlHeaders_CapabilitiesHeader   ControlHeaders = 12
)

// Enum value maps for ControlHeaders.
var (
	ControlHeaders_name = map[int32]string{
		0:  "NoneHeader",
		10: "ListenersHeader",
		11: "RouterMetadataHeader",
		12: "CapabilitiesHeader",
	}
	ControlHeaders_value = map[string]int32{
		"NoneHeader":           0,
		"ListenersHeader":      10,
		"RouterMetadataHeader": 11,
		"CapabilitiesHeader":   12,
	}
)

func (x ControlHeaders) Enum() *ControlHeaders {
	p := new(ControlHeaders)
	*p = x
	return p
}

func (x ControlHeaders) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlHeaders) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[1].Descriptor()
}

func (ControlHeaders) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[1]
}

func (x ControlHeaders) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlHeaders.Descriptor instead.
func (ControlHeaders) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{1}
}

type RouterCapability int32

const (
	RouterCapability_CapabilityZero RouterCapability = 0
	RouterCapability_LinkManagement RouterCapability = 1
)

// Enum value maps for RouterCapability.
var (
	RouterCapability_name = map[int32]string{
		0: "CapabilityZero",
		1: "LinkManagement",
	}
	RouterCapability_value = map[string]int32{
		"CapabilityZero": 0,
		"LinkManagement": 1,
	}
)

func (x RouterCapability) Enum() *RouterCapability {
	p := new(RouterCapability)
	*p = x
	return p
}

func (x RouterCapability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouterCapability) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[2].Descriptor()
}

func (RouterCapability) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[2]
}

func (x RouterCapability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouterCapability.Descriptor instead.
func (RouterCapability) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{2}
}

// SettingTypes are used with the Settings message send arbitrary settings to routers.
// SettingTypes default to int32 which can be used seamlessly for keys in the Settings.data field
type SettingTypes int32

const (
	// unused, consume to avoid zero value accidents
	SettingTypes_UnusedSetting SettingTypes = 0
	// Sent to routers to notify them of a controller IP/hostname move
	SettingTypes_NewCtrlAddress SettingTypes = 1
)

// Enum value maps for SettingTypes.
var (
	SettingTypes_name = map[int32]string{
		0: "UnusedSetting",
		1: "NewCtrlAddress",
	}
	SettingTypes_value = map[string]int32{
		"UnusedSetting":  0,
		"NewCtrlAddress": 1,
	}
)

func (x SettingTypes) Enum() *SettingTypes {
	p := new(SettingTypes)
	*p = x
	return p
}

func (x SettingTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettingTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[3].Descriptor()
}

func (SettingTypes) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[3]
}

func (x SettingTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettingTypes.Descriptor instead.
func (SettingTypes) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{3}
}

type TerminatorPrecedence int32

const (
	TerminatorPrecedence_Default  TerminatorPrecedence = 0
	TerminatorPrecedence_Required TerminatorPrecedence = 1
	TerminatorPrecedence_Failed   TerminatorPrecedence = 2
)

// Enum value maps for TerminatorPrecedence.
var (
	TerminatorPrecedence_name = map[int32]string{
		0: "Default",
		1: "Required",
		2: "Failed",
	}
	TerminatorPrecedence_value = map[string]int32{
		"Default":  0,
		"Required": 1,
		"Failed":   2,
	}
)

func (x TerminatorPrecedence) Enum() *TerminatorPrecedence {
	p := new(TerminatorPrecedence)
	*p = x
	return p
}

func (x TerminatorPrecedence) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminatorPrecedence) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[4].Descriptor()
}

func (TerminatorPrecedence) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[4]
}

func (x TerminatorPrecedence) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminatorPrecedence.Descriptor instead.
func (TerminatorPrecedence) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{4}
}

type TerminatorInvalidReason int32

const (
	TerminatorInvalidReason_UnknownBinding    TerminatorInvalidReason = 0
	TerminatorInvalidReason_UnknownTerminator TerminatorInvalidReason = 1
	TerminatorInvalidReason_BadState          TerminatorInvalidReason = 2
)

// Enum value maps for TerminatorInvalidReason.
var (
	TerminatorInvalidReason_name = map[int32]string{
		0: "UnknownBinding",
		1: "UnknownTerminator",
		2: "BadState",
	}
	TerminatorInvalidReason_value = map[string]int32{
		"UnknownBinding":    0,
		"UnknownTerminator": 1,
		"BadState":          2,
	}
)

func (x TerminatorInvalidReason) Enum() *TerminatorInvalidReason {
	p := new(TerminatorInvalidReason)
	*p = x
	return p
}

func (x TerminatorInvalidReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminatorInvalidReason) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[5].Descriptor()
}

func (TerminatorInvalidReason) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[5]
}

func (x TerminatorInvalidReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminatorInvalidReason.Descriptor instead.
func (TerminatorInvalidReason) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{5}
}

type FaultSubject int32

const (
	FaultSubject_IngressFault             FaultSubject = 0
	FaultSubject_EgressFault              FaultSubject = 1
	FaultSubject_LinkFault                FaultSubject = 2
	FaultSubject_ForwardFault             FaultSubject = 3
	FaultSubject_UnknownOwnerForwardFault FaultSubject = 4
	FaultSubject_LinkDuplicate            FaultSubject = 5
)

// Enum value maps for FaultSubject.
var (
	FaultSubject_name = map[int32]string{
		0: "IngressFault",
		1: "EgressFault",
		2: "LinkFault",
		3: "ForwardFault",
		4: "UnknownOwnerForwardFault",
		5: "LinkDuplicate",
	}
	FaultSubject_value = map[string]int32{
		"IngressFault":             0,
		"EgressFault":              1,
		"LinkFault":                2,
		"ForwardFault":             3,
		"UnknownOwnerForwardFault": 4,
		"LinkDuplicate":            5,
	}
)

func (x FaultSubject) Enum() *FaultSubject {
	p := new(FaultSubject)
	*p = x
	return p
}

func (x FaultSubject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultSubject) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[6].Descriptor()
}

func (FaultSubject) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[6]
}

func (x FaultSubject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultSubject.Descriptor instead.
func (FaultSubject) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{6}
}

type DestType int32

const (
	DestType_Start DestType = 0
	DestType_End   DestType = 1
	DestType_Link  DestType = 2
)

// Enum value maps for DestType.
var (
	DestType_name = map[int32]string{
		0: "Start",
		1: "End",
		2: "Link",
	}
	DestType_value = map[string]int32{
		"Start": 0,
		"End":   1,
		"Link":  2,
	}
)

func (x DestType) Enum() *DestType {
	p := new(DestType)
	*p = x
	return p
}

func (x DestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DestType) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[7].Descriptor()
}

func (DestType) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[7]
}

func (x DestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DestType.Descriptor instead.
func (DestType) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{7}
}

type PeerState int32

const (
	PeerState_Healthy   PeerState = 0
	PeerState_Unhealthy PeerState = 1
	PeerState_Removed   PeerState = 2
)

// Enum value maps for PeerState.
var (
	PeerState_name = map[int32]string{
		0: "Healthy",
		1: "Unhealthy",
		2: "Removed",
	}
	PeerState_value = map[string]int32{
		"Healthy":   0,
		"Unhealthy": 1,
		"Removed":   2,
	}
)

func (x PeerState) Enum() *PeerState {
	p := new(PeerState)
	*p = x
	return p
}

func (x PeerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PeerState) Descriptor() protoreflect.EnumDescriptor {
	return file_ctrl_proto_enumTypes[8].Descriptor()
}

func (PeerState) Type() protoreflect.EnumType {
	return &file_ctrl_proto_enumTypes[8]
}

func (x PeerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PeerState.Descriptor instead.
func (PeerState) EnumDescriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{8}
}

// Settings are sent to to routers to configure arbitrary runtime settings.
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[int32][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{0}
}

func (x *Settings) GetData() map[int32][]byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type CircuitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IngressId string            `protobuf:"bytes,1,opt,name=ingressId,proto3" json:"ingressId,omitempty"`
	Service   string            `protobuf:"bytes,2,opt,name=service,proto3" json:"service,omitempty"`
	PeerData  map[uint32][]byte `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CircuitRequest) Reset() {
	*x = CircuitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitRequest) ProtoMessage() {}

func (x *CircuitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitRequest.ProtoReflect.Descriptor instead.
func (*CircuitRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{1}
}

func (x *CircuitRequest) GetIngressId() string {
	if x != nil {
		return x.IngressId
	}
	return ""
}

func (x *CircuitRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *CircuitRequest) GetPeerData() map[uint32][]byte {
	if x != nil {
		return x.PeerData
	}
	return nil
}

type CircuitConfirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitIds []string         `protobuf:"bytes,1,rep,name=circuitIds,proto3" json:"circuitIds,omitempty"`
	IdleTimes  map[string]int64 `protobuf:"bytes,2,rep,name=idleTimes,proto3" json:"idleTimes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CircuitConfirmation) Reset() {
	*x = CircuitConfirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitConfirmation) ProtoMessage() {}

func (x *CircuitConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitConfirmation.ProtoReflect.Descriptor instead.
func (*CircuitConfirmation) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{2}
}

func (x *CircuitConfirmation) GetCircuitIds() []string {
	if x != nil {
		return x.CircuitIds
	}
	return nil
}

func (x *CircuitConfirmation) GetIdleTimes() map[string]int64 {
	if x != nil {
		return x.IdleTimes
	}
	return nil
}

type CreateTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId      string               `protobuf:"bytes,2,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Binding        string               `protobuf:"bytes,3,opt,name=binding,proto3" json:"binding,omitempty"`
	Address        string               `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PeerData       map[uint32][]byte    `protobuf:"bytes,5,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cost           uint32               `protobuf:"varint,6,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence     TerminatorPrecedence `protobuf:"varint,7,opt,name=precedence,proto3,enum=ziti.ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	InstanceId     string               `protobuf:"bytes,8,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceSecret []byte               `protobuf:"bytes,9,opt,name=instanceSecret,proto3" json:"instanceSecret,omitempty"`
}

func (x *CreateTerminatorRequest) Reset() {
	*x = CreateTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTerminatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTerminatorRequest) ProtoMessage() {}

func (x *CreateTerminatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTerminatorRequest.ProtoReflect.Descriptor instead.
func (*CreateTerminatorRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTerminatorRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateTerminatorRequest) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *CreateTerminatorRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTerminatorRequest) GetPeerData() map[uint32][]byte {
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTerminatorRequest) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateTerminatorRequest) GetPrecedence() TerminatorPrecedence {
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateTerminatorRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateTerminatorRequest) GetInstanceSecret() []byte {
	if x != nil {
		return x.InstanceSecret
	}
	return nil
}

type RemoveTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId string `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
}

func (x *RemoveTerminatorRequest) Reset() {
	*x = RemoveTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTerminatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTerminatorRequest) ProtoMessage() {}

func (x *RemoveTerminatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTerminatorRequest.ProtoReflect.Descriptor instead.
func (*RemoveTerminatorRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{4}
}

func (x *RemoveTerminatorRequest) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

type RemoveTerminatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorIds []string `protobuf:"bytes,1,rep,name=terminatorIds,proto3" json:"terminatorIds,omitempty"`
}

func (x *RemoveTerminatorsRequest) Reset() {
	*x = RemoveTerminatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTerminatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTerminatorsRequest) ProtoMessage() {}

func (x *RemoveTerminatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTerminatorsRequest.ProtoReflect.Descriptor instead.
func (*RemoveTerminatorsRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveTerminatorsRequest) GetTerminatorIds() []string {
	if x != nil {
		return x.TerminatorIds
	}
	return nil
}

type Terminator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Binding string `protobuf:"bytes,2,opt,name=binding,proto3" json:"binding,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Marker  uint64 `protobuf:"varint,4,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (x *Terminator) Reset() {
	*x = Terminator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Terminator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Terminator) ProtoMessage() {}

func (x *Terminator) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Terminator.ProtoReflect.Descriptor instead.
func (*Terminator) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{6}
}

func (x *Terminator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Terminator) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Terminator) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Terminator) GetMarker() uint64 {
	if x != nil {
		return x.Marker
	}
	return 0
}

type ValidateTerminatorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminators []*Terminator `protobuf:"bytes,1,rep,name=terminators,proto3" json:"terminators,omitempty"`
}

func (x *ValidateTerminatorsRequest) Reset() {
	*x = ValidateTerminatorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTerminatorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTerminatorsRequest) ProtoMessage() {}

func (x *ValidateTerminatorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTerminatorsRequest.ProtoReflect.Descriptor instead.
func (*ValidateTerminatorsRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{7}
}

func (x *ValidateTerminatorsRequest) GetTerminators() []*Terminator {
	if x != nil {
		return x.Terminators
	}
	return nil
}

type ValidateTerminatorsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terminators []*Terminator `protobuf:"bytes,1,rep,name=terminators,proto3" json:"terminators,omitempty"`
	FixInvalid  bool          `protobuf:"varint,2,opt,name=fixInvalid,proto3" json:"fixInvalid,omitempty"`
}

func (x *ValidateTerminatorsV2Request) Reset() {
	*x = ValidateTerminatorsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTerminatorsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTerminatorsV2Request) ProtoMessage() {}

func (x *ValidateTerminatorsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTerminatorsV2Request.ProtoReflect.Descriptor instead.
func (*ValidateTerminatorsV2Request) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{8}
}

func (x *ValidateTerminatorsV2Request) GetTerminators() []*Terminator {
	if x != nil {
		return x.Terminators
	}
	return nil
}

func (x *ValidateTerminatorsV2Request) GetFixInvalid() bool {
	if x != nil {
		return x.FixInvalid
	}
	return false
}

type RouterTerminatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid  bool                    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Reason TerminatorInvalidReason `protobuf:"varint,2,opt,name=reason,proto3,enum=ziti.ctrl.pb.TerminatorInvalidReason" json:"reason,omitempty"`
	Detail string                  `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"` // inspect info if valid
	Marker uint64                  `protobuf:"varint,4,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (x *RouterTerminatorState) Reset() {
	*x = RouterTerminatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterTerminatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterTerminatorState) ProtoMessage() {}

func (x *RouterTerminatorState) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterTerminatorState.ProtoReflect.Descriptor instead.
func (*RouterTerminatorState) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{9}
}

func (x *RouterTerminatorState) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *RouterTerminatorState) GetReason() TerminatorInvalidReason {
	if x != nil {
		return x.Reason
	}
	return TerminatorInvalidReason_UnknownBinding
}

func (x *RouterTerminatorState) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *RouterTerminatorState) GetMarker() uint64 {
	if x != nil {
		return x.Marker
	}
	return 0
}

type ValidateTerminatorsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	States map[string]*RouterTerminatorState `protobuf:"bytes,1,rep,name=states,proto3" json:"states,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidateTerminatorsV2Response) Reset() {
	*x = ValidateTerminatorsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateTerminatorsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateTerminatorsV2Response) ProtoMessage() {}

func (x *ValidateTerminatorsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateTerminatorsV2Response.ProtoReflect.Descriptor instead.
func (*ValidateTerminatorsV2Response) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateTerminatorsV2Response) GetStates() map[string]*RouterTerminatorState {
	if x != nil {
		return x.States
	}
	return nil
}

type UpdateTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId     string               `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	UpdatePrecedence bool                 `protobuf:"varint,2,opt,name=updatePrecedence,proto3" json:"updatePrecedence,omitempty"`
	UpdateCost       bool                 `protobuf:"varint,3,opt,name=updateCost,proto3" json:"updateCost,omitempty"`
	Precedence       TerminatorPrecedence `protobuf:"varint,4,opt,name=precedence,proto3,enum=ziti.ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	Cost             uint32               `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *UpdateTerminatorRequest) Reset() {
	*x = UpdateTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTerminatorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTerminatorRequest) ProtoMessage() {}

func (x *UpdateTerminatorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTerminatorRequest.ProtoReflect.Descriptor instead.
func (*UpdateTerminatorRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTerminatorRequest) GetTerminatorId() string {
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *UpdateTerminatorRequest) GetUpdatePrecedence() bool {
	if x != nil {
		return x.UpdatePrecedence
	}
	return false
}

func (x *UpdateTerminatorRequest) GetUpdateCost() bool {
	if x != nil {
		return x.UpdateCost
	}
	return false
}

func (x *UpdateTerminatorRequest) GetPrecedence() TerminatorPrecedence {
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *UpdateTerminatorRequest) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type Dial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId        string `protobuf:"bytes,1,opt,name=linkId,proto3" json:"linkId,omitempty"`
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	RouterId      string `protobuf:"bytes,3,opt,name=routerId,proto3" json:"routerId,omitempty"`
	LinkProtocol  string `protobuf:"bytes,4,opt,name=linkProtocol,proto3" json:"linkProtocol,omitempty"`
	RouterVersion string `protobuf:"bytes,5,opt,name=routerVersion,proto3" json:"routerVersion,omitempty"`
}

func (x *Dial) Reset() {
	*x = Dial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dial) ProtoMessage() {}

func (x *Dial) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dial.ProtoReflect.Descriptor instead.
func (*Dial) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{12}
}

func (x *Dial) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *Dial) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dial) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *Dial) GetLinkProtocol() string {
	if x != nil {
		return x.LinkProtocol
	}
	return ""
}

func (x *Dial) GetRouterVersion() string {
	if x != nil {
		return x.RouterVersion
	}
	return ""
}

type LinkConn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LocalAddr  string `protobuf:"bytes,2,opt,name=localAddr,proto3" json:"localAddr,omitempty"`
	RemoteAddr string `protobuf:"bytes,3,opt,name=remoteAddr,proto3" json:"remoteAddr,omitempty"`
}

func (x *LinkConn) Reset() {
	*x = LinkConn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkConn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkConn) ProtoMessage() {}

func (x *LinkConn) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkConn.ProtoReflect.Descriptor instead.
func (*LinkConn) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{13}
}

func (x *LinkConn) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkConn) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *LinkConn) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

type LinkConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Conns []*LinkConn `protobuf:"bytes,2,rep,name=conns,proto3" json:"conns,omitempty"`
}

func (x *LinkConnected) Reset() {
	*x = LinkConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkConnected) ProtoMessage() {}

func (x *LinkConnected) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkConnected.ProtoReflect.Descriptor instead.
func (*LinkConnected) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{14}
}

func (x *LinkConnected) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LinkConnected) GetConns() []*LinkConn {
	if x != nil {
		return x.Conns
	}
	return nil
}

type RouterLinks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links []*RouterLinks_RouterLink `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
}

func (x *RouterLinks) Reset() {
	*x = RouterLinks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterLinks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterLinks) ProtoMessage() {}

func (x *RouterLinks) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterLinks.ProtoReflect.Descriptor instead.
func (*RouterLinks) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{15}
}

func (x *RouterLinks) GetLinks() []*RouterLinks_RouterLink {
	if x != nil {
		return x.Links
	}
	return nil
}

type Fault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subject   FaultSubject `protobuf:"varint,1,opt,name=subject,proto3,enum=ziti.ctrl.pb.FaultSubject" json:"subject,omitempty"`
	Id        string       `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Iteration uint32       `protobuf:"varint,3,opt,name=iteration,proto3" json:"iteration,omitempty"`
}

func (x *Fault) Reset() {
	*x = Fault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fault) ProtoMessage() {}

func (x *Fault) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fault.ProtoReflect.Descriptor instead.
func (*Fault) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{16}
}

func (x *Fault) GetSubject() FaultSubject {
	if x != nil {
		return x.Subject
	}
	return FaultSubject_IngressFault
}

func (x *Fault) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fault) GetIteration() uint32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      map[string]string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChannelMask uint32            `protobuf:"varint,2,opt,name=channelMask,proto3" json:"channelMask,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{17}
}

func (x *Context) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Context) GetChannelMask() uint32 {
	if x != nil {
		return x.ChannelMask
	}
	return 0
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId string            `protobuf:"bytes,1,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	Attempt   uint32            `protobuf:"varint,2,opt,name=attempt,proto3" json:"attempt,omitempty"`
	Egress    *Route_Egress     `protobuf:"bytes,3,opt,name=egress,proto3" json:"egress,omitempty"`
	Forwards  []*Route_Forward  `protobuf:"bytes,4,rep,name=forwards,proto3" json:"forwards,omitempty"`
	Context   *Context          `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	Timeout   uint64            `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Tags      map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{18}
}

func (x *Route) GetCircuitId() string {
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *Route) GetAttempt() uint32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

func (x *Route) GetEgress() *Route_Egress {
	if x != nil {
		return x.Egress
	}
	return nil
}

func (x *Route) GetForwards() []*Route_Forward {
	if x != nil {
		return x.Forwards
	}
	return nil
}

func (x *Route) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Route) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *Route) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Unroute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId string `protobuf:"bytes,1,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	Now       bool   `protobuf:"varint,2,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *Unroute) Reset() {
	*x = Unroute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unroute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unroute) ProtoMessage() {}

func (x *Unroute) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unroute.ProtoReflect.Descriptor instead.
func (*Unroute) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{19}
}

func (x *Unroute) GetCircuitId() string {
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *Unroute) GetNow() bool {
	if x != nil {
		return x.Now
	}
	return false
}

type InspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestedValues []string `protobuf:"bytes,1,rep,name=requestedValues,proto3" json:"requestedValues,omitempty"`
}

func (x *InspectRequest) Reset() {
	*x = InspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRequest) ProtoMessage() {}

func (x *InspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRequest.ProtoReflect.Descriptor instead.
func (*InspectRequest) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{20}
}

func (x *InspectRequest) GetRequestedValues() []string {
	if x != nil {
		return x.RequestedValues
	}
	return nil
}

type InspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Errors  []string                        `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Values  []*InspectResponse_InspectValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *InspectResponse) Reset() {
	*x = InspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse) ProtoMessage() {}

func (x *InspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse.ProtoReflect.Descriptor instead.
func (*InspectResponse) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{21}
}

func (x *InspectResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InspectResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *InspectResponse) GetValues() []*InspectResponse_InspectValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type VerifyRouter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId     string   `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	Fingerprints []string `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
}

func (x *VerifyRouter) Reset() {
	*x = VerifyRouter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRouter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRouter) ProtoMessage() {}

func (x *VerifyRouter) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRouter.ProtoReflect.Descriptor instead.
func (*VerifyRouter) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{22}
}

func (x *VerifyRouter) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *VerifyRouter) GetFingerprints() []string {
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address      string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Protocol     string   `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	CostTags     []string `protobuf:"bytes,3,rep,name=costTags,proto3" json:"costTags,omitempty"`
	Groups       []string `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	LocalBinding string   `protobuf:"bytes,5,opt,name=localBinding,proto3" json:"localBinding,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{23}
}

func (x *Listener) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Listener) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Listener) GetCostTags() []string {
	if x != nil {
		return x.CostTags
	}
	return nil
}

func (x *Listener) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Listener) GetLocalBinding() string {
	if x != nil {
		return x.LocalBinding
	}
	return ""
}

type Listeners struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*Listener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *Listeners) Reset() {
	*x = Listeners{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listeners) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listeners) ProtoMessage() {}

func (x *Listeners) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listeners.ProtoReflect.Descriptor instead.
func (*Listeners) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{24}
}

func (x *Listeners) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type UpdateCtrlAddresses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Index     uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	IsLeader  bool     `protobuf:"varint,3,opt,name=isLeader,proto3" json:"isLeader,omitempty"`
}

func (x *UpdateCtrlAddresses) Reset() {
	*x = UpdateCtrlAddresses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCtrlAddresses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCtrlAddresses) ProtoMessage() {}

func (x *UpdateCtrlAddresses) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCtrlAddresses.ProtoReflect.Descriptor instead.
func (*UpdateCtrlAddresses) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateCtrlAddresses) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *UpdateCtrlAddresses) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UpdateCtrlAddresses) GetIsLeader() bool {
	if x != nil {
		return x.IsLeader
	}
	return false
}

type UpdateClusterLeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *UpdateClusterLeader) Reset() {
	*x = UpdateClusterLeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateClusterLeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterLeader) ProtoMessage() {}

func (x *UpdateClusterLeader) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterLeader.ProtoReflect.Descriptor instead.
func (*UpdateClusterLeader) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateClusterLeader) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

type PeerStateChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version   string      `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	State     PeerState   `protobuf:"varint,3,opt,name=state,proto3,enum=ziti.ctrl.pb.PeerState" json:"state,omitempty"`
	Listeners []*Listener `protobuf:"bytes,4,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *PeerStateChange) Reset() {
	*x = PeerStateChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStateChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStateChange) ProtoMessage() {}

func (x *PeerStateChange) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStateChange.ProtoReflect.Descriptor instead.
func (*PeerStateChange) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{27}
}

func (x *PeerStateChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerStateChange) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PeerStateChange) GetState() PeerState {
	if x != nil {
		return x.State
	}
	return PeerState_Healthy
}

func (x *PeerStateChange) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type PeerStateChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Changes []*PeerStateChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *PeerStateChanges) Reset() {
	*x = PeerStateChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerStateChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerStateChanges) ProtoMessage() {}

func (x *PeerStateChanges) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerStateChanges.ProtoReflect.Descriptor instead.
func (*PeerStateChanges) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{28}
}

func (x *PeerStateChanges) GetChanges() []*PeerStateChange {
	if x != nil {
		return x.Changes
	}
	return nil
}

type RouterMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Capabilities []RouterCapability `protobuf:"varint,1,rep,packed,name=capabilities,proto3,enum=ziti.ctrl.pb.RouterCapability" json:"capabilities,omitempty"`
}

func (x *RouterMetadata) Reset() {
	*x = RouterMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterMetadata) ProtoMessage() {}

func (x *RouterMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterMetadata.ProtoReflect.Descriptor instead.
func (*RouterMetadata) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{29}
}

func (x *RouterMetadata) GetCapabilities() []RouterCapability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type RouterLinks_RouterLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DestRouterId string   `protobuf:"bytes,2,opt,name=destRouterId,proto3" json:"destRouterId,omitempty"`
	LinkProtocol string   `protobuf:"bytes,3,opt,name=linkProtocol,proto3" json:"linkProtocol,omitempty"`
	LinkCostTags []string `protobuf:"bytes,4,rep,name=linkCostTags,proto3" json:"linkCostTags,omitempty"`
	DialAddress  string   `protobuf:"bytes,5,opt,name=dialAddress,proto3" json:"dialAddress,omitempty"`
	Iteration    uint32   `protobuf:"varint,6,opt,name=iteration,proto3" json:"iteration,omitempty"`
}

func (x *RouterLinks_RouterLink) Reset() {
	*x = RouterLinks_RouterLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterLinks_RouterLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterLinks_RouterLink) ProtoMessage() {}

func (x *RouterLinks_RouterLink) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterLinks_RouterLink.ProtoReflect.Descriptor instead.
func (*RouterLinks_RouterLink) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{15, 0}
}

func (x *RouterLinks_RouterLink) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RouterLinks_RouterLink) GetDestRouterId() string {
	if x != nil {
		return x.DestRouterId
	}
	return ""
}

func (x *RouterLinks_RouterLink) GetLinkProtocol() string {
	if x != nil {
		return x.LinkProtocol
	}
	return ""
}

func (x *RouterLinks_RouterLink) GetLinkCostTags() []string {
	if x != nil {
		return x.LinkCostTags
	}
	return nil
}

func (x *RouterLinks_RouterLink) GetDialAddress() string {
	if x != nil {
		return x.DialAddress
	}
	return ""
}

func (x *RouterLinks_RouterLink) GetIteration() uint32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

type Route_Egress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Binding     string            `protobuf:"bytes,1,opt,name=binding,proto3" json:"binding,omitempty"`
	Address     string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Destination string            `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	PeerData    map[uint32][]byte `protobuf:"bytes,4,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Route_Egress) Reset() {
	*x = Route_Egress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route_Egress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route_Egress) ProtoMessage() {}

func (x *Route_Egress) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route_Egress.ProtoReflect.Descriptor instead.
func (*Route_Egress) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Route_Egress) GetBinding() string {
	if x != nil {
		return x.Binding
	}
	return ""
}

func (x *Route_Egress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Route_Egress) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *Route_Egress) GetPeerData() map[uint32][]byte {
	if x != nil {
		return x.PeerData
	}
	return nil
}

type Route_Forward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcAddress string   `protobuf:"bytes,1,opt,name=srcAddress,proto3" json:"srcAddress,omitempty"`
	DstAddress string   `protobuf:"bytes,2,opt,name=dstAddress,proto3" json:"dstAddress,omitempty"`
	DstType    DestType `protobuf:"varint,3,opt,name=dstType,proto3,enum=ziti.ctrl.pb.DestType" json:"dstType,omitempty"`
}

func (x *Route_Forward) Reset() {
	*x = Route_Forward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route_Forward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route_Forward) ProtoMessage() {}

func (x *Route_Forward) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route_Forward.ProtoReflect.Descriptor instead.
func (*Route_Forward) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Route_Forward) GetSrcAddress() string {
	if x != nil {
		return x.SrcAddress
	}
	return ""
}

func (x *Route_Forward) GetDstAddress() string {
	if x != nil {
		return x.DstAddress
	}
	return ""
}

func (x *Route_Forward) GetDstType() DestType {
	if x != nil {
		return x.DstType
	}
	return DestType_Start
}

type InspectResponse_InspectValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InspectResponse_InspectValue) Reset() {
	*x = InspectResponse_InspectValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ctrl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse_InspectValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse_InspectValue) ProtoMessage() {}

func (x *InspectResponse_InspectValue) ProtoReflect() protoreflect.Message {
	mi := &file_ctrl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse_InspectValue.ProtoReflect.Descriptor instead.
func (*InspectResponse_InspectValue) Descriptor() ([]byte, []int) {
	return file_ctrl_proto_rawDescGZIP(), []int{21, 0}
}

func (x *InspectResponse_InspectValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InspectResponse_InspectValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_ctrl_proto protoreflect.FileDescriptor

var file_ctrl_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x22, 0x79, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x01, 0x0a, 0x13, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x73, 0x12, 0x4e, 0x0a,
	0x09, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x1a, 0x3c, 0x0a,
	0x0e, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x03, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x42,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x73, 0x22, 0x68, 0x0a, 0x0a, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x22, 0x58, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x7a, 0x0a, 0x1c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69,
	0x78, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x56,
	0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x5e, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x9e,
	0x01, 0x0a, 0x04, 0x44, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e,
	0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x58, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x22, 0x4d, 0x0a, 0x0d, 0x4c, 0x69, 0x6e,
	0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6f,
	0x6e, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x6e, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x6b, 0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x39, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc4, 0x05, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0xe1, 0x01,
	0x0a, 0x06, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x7b, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x64, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x64, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x37,
	0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x39, 0x0a, 0x07, 0x55, 0x6e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e,
	0x6f, 0x77, 0x22, 0x3a, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4e, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x41, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73,
	0x22, 0x65, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x2b, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2a, 0xa8, 0x06, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65,
	0x72, 0x6f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe8, 0x07, 0x12, 0x0d, 0x0a,
	0x08, 0x44, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0xea, 0x07, 0x12, 0x16, 0x0a, 0x11,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xeb, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xec, 0x07, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xed, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x6e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xee, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0xef, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x50, 0x69, 0x70, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf0, 0x07, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf2, 0x07, 0x12,
	0x20, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf3,
	0x07, 0x12, 0x20, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0xf4, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf5, 0x07, 0x12, 0x18, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xf6, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf9, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfa, 0x07, 0x12, 0x11, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfc, 0x07,
	0x12, 0x1c, 0x0a, 0x17, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8a, 0x08, 0x12, 0x14,
	0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x8b, 0x08, 0x12, 0x15, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8c, 0x08, 0x12, 0x1c, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x74, 0x72, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8d, 0x08, 0x12, 0x21, 0x0a, 0x1c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8e, 0x08, 0x12, 0x1d, 0x0a, 0x18,
	0x51, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x8f, 0x08, 0x12, 0x1f, 0x0a, 0x1a, 0x44,
	0x65, 0x71, 0x75, 0x69, 0x65, 0x73, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x90, 0x08, 0x12, 0x25, 0x0a, 0x20,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x91, 0x08, 0x12, 0x26, 0x0a, 0x21, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x92, 0x08, 0x12, 0x22, 0x0a, 0x1d, 0x44,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x93, 0x08, 0x12,
	0x1f, 0x0a, 0x1a, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x9a, 0x08,
	0x12, 0x23, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0x9b, 0x08, 0x2a, 0x67, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x6e, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x10, 0x0c, 0x2a, 0x3a,
	0x0a, 0x10, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x01, 0x2a, 0x35, 0x0a, 0x0c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x65, 0x77, 0x43, 0x74, 0x72, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x10,
	0x01, 0x2a, 0x3d, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02,
	0x2a, 0x52, 0x0a, 0x17, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0x02, 0x2a, 0x83, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x69, 0x6e, 0x6b, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x05, 0x2a, 0x28, 0x0a, 0x08, 0x44, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69,
	0x6e, 0x6b, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x55, 0x6e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x7a, 0x69, 0x74,
	0x69, 0x2f, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x74, 0x72, 0x6c,
	0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ctrl_proto_rawDescOnce sync.Once
	file_ctrl_proto_rawDescData = file_ctrl_proto_rawDesc
)

func file_ctrl_proto_rawDescGZIP() []byte {
	file_ctrl_proto_rawDescOnce.Do(func() {
		file_ctrl_proto_rawDescData = protoimpl.X.CompressGZIP(file_ctrl_proto_rawDescData)
	})
	return file_ctrl_proto_rawDescData
}

var file_ctrl_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_ctrl_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_ctrl_proto_goTypes = []interface{}{
	(ContentType)(0),                      // 0: ziti.ctrl.pb.ContentType
	(ControlHeaders)(0),                   // 1: ziti.ctrl.pb.ControlHeaders
	(RouterCapability)(0),                 // 2: ziti.ctrl.pb.RouterCapability
	(SettingTypes)(0),                     // 3: ziti.ctrl.pb.SettingTypes
	(TerminatorPrecedence)(0),             // 4: ziti.ctrl.pb.TerminatorPrecedence
	(TerminatorInvalidReason)(0),          // 5: ziti.ctrl.pb.TerminatorInvalidReason
	(FaultSubject)(0),                     // 6: ziti.ctrl.pb.FaultSubject
	(DestType)(0),                         // 7: ziti.ctrl.pb.DestType
	(PeerState)(0),                        // 8: ziti.ctrl.pb.PeerState
	(*Settings)(nil),                      // 9: ziti.ctrl.pb.Settings
	(*CircuitRequest)(nil),                // 10: ziti.ctrl.pb.CircuitRequest
	(*CircuitConfirmation)(nil),           // 11: ziti.ctrl.pb.CircuitConfirmation
	(*CreateTerminatorRequest)(nil),       // 12: ziti.ctrl.pb.CreateTerminatorRequest
	(*RemoveTerminatorRequest)(nil),       // 13: ziti.ctrl.pb.RemoveTerminatorRequest
	(*RemoveTerminatorsRequest)(nil),      // 14: ziti.ctrl.pb.RemoveTerminatorsRequest
	(*Terminator)(nil),                    // 15: ziti.ctrl.pb.Terminator
	(*ValidateTerminatorsRequest)(nil),    // 16: ziti.ctrl.pb.ValidateTerminatorsRequest
	(*ValidateTerminatorsV2Request)(nil),  // 17: ziti.ctrl.pb.ValidateTerminatorsV2Request
	(*RouterTerminatorState)(nil),         // 18: ziti.ctrl.pb.RouterTerminatorState
	(*ValidateTerminatorsV2Response)(nil), // 19: ziti.ctrl.pb.ValidateTerminatorsV2Response
	(*UpdateTerminatorRequest)(nil),       // 20: ziti.ctrl.pb.UpdateTerminatorRequest
	(*Dial)(nil),                          // 21: ziti.ctrl.pb.Dial
	(*LinkConn)(nil),                      // 22: ziti.ctrl.pb.LinkConn
	(*LinkConnected)(nil),                 // 23: ziti.ctrl.pb.LinkConnected
	(*RouterLinks)(nil),                   // 24: ziti.ctrl.pb.RouterLinks
	(*Fault)(nil),                         // 25: ziti.ctrl.pb.Fault
	(*Context)(nil),                       // 26: ziti.ctrl.pb.Context
	(*Route)(nil),                         // 27: ziti.ctrl.pb.Route
	(*Unroute)(nil),                       // 28: ziti.ctrl.pb.Unroute
	(*InspectRequest)(nil),                // 29: ziti.ctrl.pb.InspectRequest
	(*InspectResponse)(nil),               // 30: ziti.ctrl.pb.InspectResponse
	(*VerifyRouter)(nil),                  // 31: ziti.ctrl.pb.VerifyRouter
	(*Listener)(nil),                      // 32: ziti.ctrl.pb.Listener
	(*Listeners)(nil),                     // 33: ziti.ctrl.pb.Listeners
	(*UpdateCtrlAddresses)(nil),           // 34: ziti.ctrl.pb.UpdateCtrlAddresses
	(*UpdateClusterLeader)(nil),           // 35: ziti.ctrl.pb.UpdateClusterLeader
	(*PeerStateChange)(nil),               // 36: ziti.ctrl.pb.PeerStateChange
	(*PeerStateChanges)(nil),              // 37: ziti.ctrl.pb.PeerStateChanges
	(*RouterMetadata)(nil),                // 38: ziti.ctrl.pb.RouterMetadata
	nil,                                   // 39: ziti.ctrl.pb.Settings.DataEntry
	nil,                                   // 40: ziti.ctrl.pb.CircuitRequest.PeerDataEntry
	nil,                                   // 41: ziti.ctrl.pb.CircuitConfirmation.IdleTimesEntry
	nil,                                   // 42: ziti.ctrl.pb.CreateTerminatorRequest.PeerDataEntry
	nil,                                   // 43: ziti.ctrl.pb.ValidateTerminatorsV2Response.StatesEntry
	(*RouterLinks_RouterLink)(nil),        // 44: ziti.ctrl.pb.RouterLinks.RouterLink
	nil,                                   // 45: ziti.ctrl.pb.Context.FieldsEntry
	(*Route_Egress)(nil),                  // 46: ziti.ctrl.pb.Route.Egress
	(*Route_Forward)(nil),                 // 47: ziti.ctrl.pb.Route.Forward
	nil,                                   // 48: ziti.ctrl.pb.Route.TagsEntry
	nil,                                   // 49: ziti.ctrl.pb.Route.Egress.PeerDataEntry
	(*InspectResponse_InspectValue)(nil),  // 50: ziti.ctrl.pb.InspectResponse.InspectValue
}
var file_ctrl_proto_depIdxs = []int32{
	39, // 0: ziti.ctrl.pb.Settings.data:type_name -> ziti.ctrl.pb.Settings.DataEntry
	40, // 1: ziti.ctrl.pb.CircuitRequest.peerData:type_name -> ziti.ctrl.pb.CircuitRequest.PeerDataEntry
	41, // 2: ziti.ctrl.pb.CircuitConfirmation.idleTimes:type_name -> ziti.ctrl.pb.CircuitConfirmation.IdleTimesEntry
	42, // 3: ziti.ctrl.pb.CreateTerminatorRequest.peerData:type_name -> ziti.ctrl.pb.CreateTerminatorRequest.PeerDataEntry
	4,  // 4: ziti.ctrl.pb.CreateTerminatorRequest.precedence:type_name -> ziti.ctrl.pb.TerminatorPrecedence
	15, // 5: ziti.ctrl.pb.ValidateTerminatorsRequest.terminators:type_name -> ziti.ctrl.pb.Terminator
	15, // 6: ziti.ctrl.pb.ValidateTerminatorsV2Request.terminators:type_name -> ziti.ctrl.pb.Terminator
	5,  // 7: ziti.ctrl.pb.RouterTerminatorState.reason:type_name -> ziti.ctrl.pb.TerminatorInvalidReason
	43, // 8: ziti.ctrl.pb.ValidateTerminatorsV2Response.states:type_name -> ziti.ctrl.pb.ValidateTerminatorsV2Response.StatesEntry
	4,  // 9: ziti.ctrl.pb.UpdateTerminatorRequest.precedence:type_name -> ziti.ctrl.pb.TerminatorPrecedence
	22, // 10: ziti.ctrl.pb.LinkConnected.conns:type_name -> ziti.ctrl.pb.LinkConn
	44, // 11: ziti.ctrl.pb.RouterLinks.links:type_name -> ziti.ctrl.pb.RouterLinks.RouterLink
	6,  // 12: ziti.ctrl.pb.Fault.subject:type_name -> ziti.ctrl.pb.FaultSubject
	45, // 13: ziti.ctrl.pb.Context.fields:type_name -> ziti.ctrl.pb.Context.FieldsEntry
	46, // 14: ziti.ctrl.pb.Route.egress:type_name -> ziti.ctrl.pb.Route.Egress
	47, // 15: ziti.ctrl.pb.Route.forwards:type_name -> ziti.ctrl.pb.Route.Forward
	26, // 16: ziti.ctrl.pb.Route.context:type_name -> ziti.ctrl.pb.Context
	48, // 17: ziti.ctrl.pb.Route.tags:type_name -> ziti.ctrl.pb.Route.TagsEntry
	50, // 18: ziti.ctrl.pb.InspectResponse.values:type_name -> ziti.ctrl.pb.InspectResponse.InspectValue
	32, // 19: ziti.ctrl.pb.Listeners.listeners:type_name -> ziti.ctrl.pb.Listener
	8,  // 20: ziti.ctrl.pb.PeerStateChange.state:type_name -> ziti.ctrl.pb.PeerState
	32, // 21: ziti.ctrl.pb.PeerStateChange.listeners:type_name -> ziti.ctrl.pb.Listener
	36, // 22: ziti.ctrl.pb.PeerStateChanges.changes:type_name -> ziti.ctrl.pb.PeerStateChange
	2,  // 23: ziti.ctrl.pb.RouterMetadata.capabilities:type_name -> ziti.ctrl.pb.RouterCapability
	18, // 24: ziti.ctrl.pb.ValidateTerminatorsV2Response.StatesEntry.value:type_name -> ziti.ctrl.pb.RouterTerminatorState
	49, // 25: ziti.ctrl.pb.Route.Egress.peerData:type_name -> ziti.ctrl.pb.Route.Egress.PeerDataEntry
	7,  // 26: ziti.ctrl.pb.Route.Forward.dstType:type_name -> ziti.ctrl.pb.DestType
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_ctrl_proto_init() }
func file_ctrl_proto_init() {
	if File_ctrl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ctrl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitConfirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTerminatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Terminator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTerminatorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTerminatorsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterTerminatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateTerminatorsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkConn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterLinks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unroute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRouter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listeners); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCtrlAddresses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateClusterLeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStateChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerStateChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterLinks_RouterLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route_Egress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route_Forward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ctrl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse_InspectValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ctrl_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ctrl_proto_goTypes,
		DependencyIndexes: file_ctrl_proto_depIdxs,
		EnumInfos:         file_ctrl_proto_enumTypes,
		MessageInfos:      file_ctrl_proto_msgTypes,
	}.Build()
	File_ctrl_proto = out.File
	file_ctrl_proto_rawDesc = nil
	file_ctrl_proto_goTypes = nil
	file_ctrl_proto_depIdxs = nil
}
